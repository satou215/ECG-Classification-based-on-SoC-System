-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_VITIS_LOOP_195_1_loop_for_ap_7_loop_for_fc_7_loop_for_fa_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce0 : OUT STD_LOGIC;
    Weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce1 : OUT STD_LOGIC;
    Weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutPadConv7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutPadConv7_ce0 : OUT STD_LOGIC;
    OutPadConv7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutConv7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv7_ce0 : OUT STD_LOGIC;
    OutConv7_we0 : OUT STD_LOGIC;
    OutConv7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1453_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_ce : OUT STD_LOGIC;
    grp_fu_1461_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1461_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1461_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1461_p_ce : OUT STD_LOGIC;
    grp_fu_1469_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1469_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1469_p_ce : OUT STD_LOGIC );
end;


architecture behav of CNN_CNN_Pipeline_VITIS_LOOP_195_1_loop_for_ap_7_loop_for_fc_7_loop_for_fa_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv18_32000 : STD_LOGIC_VECTOR (17 downto 0) := "110010000000000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv14_1900 : STD_LOGIC_VECTOR (13 downto 0) := "01100100000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv9_A0 : STD_LOGIC_VECTOR (8 downto 0) := "010100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_141C : STD_LOGIC_VECTOR (12 downto 0) := "1010000011100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_281C : STD_LOGIC_VECTOR (13 downto 0) := "10100000011100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv11_2C : STD_LOGIC_VECTOR (10 downto 0) := "00000101100";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln195_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten196_load_reg_786 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal indvar_flatten211_load_reg_791 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln195_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln197_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln197_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln195_1_fu_307_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln195_1_reg_805 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln195_1_reg_805_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln197_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln197_reg_810 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln197_reg_810_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_6_fu_524_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_6_reg_826 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln202_1_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_1_reg_831 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_1_reg_831_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_1_reg_831_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_1_reg_831_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_1_reg_831_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_1_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_1_reg_835 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_1_reg_835_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_1_reg_835_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_1_reg_835_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_1_reg_835_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln205_fu_558_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln205_reg_839 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln205_reg_839_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln205_reg_839_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln205_reg_839_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln205_reg_839_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Weights_load_88_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal OutPadConv7_load_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln203_fu_630_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i7_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln197_1_fu_637_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Weights_load_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_147_fu_664_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add28_i7_reg_899 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln203_3_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln203_5_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal arrayidx51_sum_cast_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln205_1_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal s_130_fu_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_98 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln202_fu_530_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_fu_102 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln200_fu_393_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten196_fu_106 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln200_1_fu_601_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_fu_110 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln197_2_fu_359_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten211_fu_114 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal select_ln197_3_fu_613_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_fu_118 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal indvar_flatten235_fu_122 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal add_ln195_fu_245_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_177_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal icmp_ln200_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln195_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln195_1_fu_301_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln195_fu_269_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln195_1_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln197_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln195_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln197_1_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln197_fu_315_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln197_fu_327_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln197_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln198_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln198_1_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln200_fu_367_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_401_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_405_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl15_fu_417_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl16_fu_429_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_148_fu_453_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl17_fu_457_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln198_fu_385_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln200_fu_445_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_fu_477_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln203_fu_483_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl55_cast_fu_413_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_2_fu_487_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln202_2_fu_473_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_4_fu_497_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl57_cast_fu_465_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_5_fu_503_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln203_2_fu_509_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln203_1_fu_493_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln203_1_fu_513_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln202_1_fu_469_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln197_fu_437_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln197_1_fu_441_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln205_1_fu_548_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln205_fu_554_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl56_cast_fu_425_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_721_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln200_1_fu_596_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln197_1_fu_608_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln195_fu_645_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal arrayidx51_sum_fu_648_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln205_fu_668_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_671_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln205_fu_681_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln205_1_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln205_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln205_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln205_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_721_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_721_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_721_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal grp_fu_721_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_721_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_mac_muladd_6ns_6ns_6ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_6ns_6ns_6ns_11_4_1_U100 : component CNN_mac_muladd_6ns_6ns_6ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_721_p0,
        din1 => grp_fu_721_p1,
        din2 => grp_fu_721_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_721_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten196_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten196_fu_106 <= ap_const_lv9_0;
                elsif (((icmp_ln195_reg_796 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten196_fu_106 <= select_ln200_1_fu_601_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten211_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten211_fu_114 <= ap_const_lv14_0;
                elsif (((icmp_ln195_reg_796 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten211_fu_114 <= select_ln197_3_fu_613_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten235_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten235_fu_122 <= ap_const_lv18_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln195_fu_239_p2 = ap_const_lv1_0))) then 
                indvar_flatten235_fu_122 <= add_ln195_fu_245_p2;
            end if; 
        end if;
    end process;

    j_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_98 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln195_fu_239_p2 = ap_const_lv1_0))) then 
                j_fu_98 <= add_ln202_fu_530_p2;
            end if; 
        end if;
    end process;

    k_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_fu_102 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln195_fu_239_p2 = ap_const_lv1_0))) then 
                k_fu_102 <= select_ln200_fu_393_p3;
            end if; 
        end if;
    end process;

    n_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                n_fu_118 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln195_fu_239_p2 = ap_const_lv1_0))) then 
                n_fu_118 <= select_ln195_1_fu_307_p3;
            end if; 
        end if;
    end process;

    s_130_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    s_130_fu_94 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    s_130_fu_94 <= grp_fu_1453_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                y_fu_110 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln195_fu_239_p2 = ap_const_lv1_0))) then 
                y_fu_110 <= select_ln197_2_fu_359_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                OutPadConv7_load_reg_859 <= OutPadConv7_q0;
                add_ln203_6_reg_826 <= add_ln203_6_fu_524_p2;
                add_ln205_reg_839 <= add_ln205_fu_558_p2;
                add_ln205_reg_839_pp0_iter1_reg <= add_ln205_reg_839;
                add_ln205_reg_839_pp0_iter2_reg <= add_ln205_reg_839_pp0_iter1_reg;
                add_ln205_reg_839_pp0_iter3_reg <= add_ln205_reg_839_pp0_iter2_reg;
                add_ln205_reg_839_pp0_iter4_reg <= add_ln205_reg_839_pp0_iter3_reg;
                icmp_ln195_reg_796 <= icmp_ln195_fu_239_p2;
                icmp_ln197_reg_800 <= icmp_ln197_fu_263_p2;
                icmp_ln200_1_reg_835 <= icmp_ln200_1_fu_542_p2;
                icmp_ln200_1_reg_835_pp0_iter1_reg <= icmp_ln200_1_reg_835;
                icmp_ln200_1_reg_835_pp0_iter2_reg <= icmp_ln200_1_reg_835_pp0_iter1_reg;
                icmp_ln200_1_reg_835_pp0_iter3_reg <= icmp_ln200_1_reg_835_pp0_iter2_reg;
                icmp_ln200_1_reg_835_pp0_iter4_reg <= icmp_ln200_1_reg_835_pp0_iter3_reg;
                icmp_ln202_1_reg_831 <= icmp_ln202_1_fu_536_p2;
                icmp_ln202_1_reg_831_pp0_iter1_reg <= icmp_ln202_1_reg_831;
                icmp_ln202_1_reg_831_pp0_iter2_reg <= icmp_ln202_1_reg_831_pp0_iter1_reg;
                icmp_ln202_1_reg_831_pp0_iter3_reg <= icmp_ln202_1_reg_831_pp0_iter2_reg;
                icmp_ln202_1_reg_831_pp0_iter4_reg <= icmp_ln202_1_reg_831_pp0_iter3_reg;
                indvar_flatten196_load_reg_786 <= indvar_flatten196_fu_106;
                indvar_flatten211_load_reg_791 <= indvar_flatten211_fu_114;
                or_ln197_reg_810 <= or_ln197_fu_321_p2;
                or_ln197_reg_810_pp0_iter1_reg <= or_ln197_reg_810;
                select_ln195_1_reg_805 <= select_ln195_1_fu_307_p3;
                select_ln195_1_reg_805_pp0_iter1_reg <= select_ln195_1_reg_805;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                Weights_load_88_reg_844 <= Weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                Weights_load_reg_884 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add28_i7_reg_899 <= grp_fu_1453_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul21_i7_reg_869 <= grp_fu_1461_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                s_reg_889 <= grp_fu_1453_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to4, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    OutConv7_address0 <= zext_ln205_1_fu_709_p1(11 - 1 downto 0);

    OutConv7_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            OutConv7_ce0 <= ap_const_logic_1;
        else 
            OutConv7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OutConv7_d0 <= 
        ap_const_lv32_0 when (and_ln205_fu_703_p2(0) = '1') else 
        add28_i7_reg_899;

    OutConv7_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, icmp_ln202_1_reg_831_pp0_iter4_reg, icmp_ln200_1_reg_835_pp0_iter4_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln200_1_reg_835_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln202_1_reg_831_pp0_iter4_reg = ap_const_lv1_1))) then 
            OutConv7_we0 <= ap_const_logic_1;
        else 
            OutConv7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv7_address0 <= zext_ln203_5_fu_592_p1(11 - 1 downto 0);

    OutPadConv7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPadConv7_ce0 <= ap_const_logic_1;
        else 
            OutPadConv7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Weights_address0 <= arrayidx51_sum_cast_fu_654_p1(14 - 1 downto 0);
    Weights_address1 <= zext_ln203_3_fu_519_p1(14 - 1 downto 0);

    Weights_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Weights_ce0 <= ap_const_logic_1;
        else 
            Weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Weights_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Weights_ce1 <= ap_const_logic_1;
        else 
            Weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln195_1_fu_301_p2 <= std_logic_vector(unsigned(n_fu_118) + unsigned(ap_const_lv6_1));
    add_ln195_fu_245_p2 <= std_logic_vector(unsigned(indvar_flatten235_fu_122) + unsigned(ap_const_lv18_1));
    add_ln197_1_fu_608_p2 <= std_logic_vector(unsigned(indvar_flatten211_load_reg_791) + unsigned(ap_const_lv14_1));
    add_ln197_fu_315_p2 <= std_logic_vector(unsigned(select_ln195_fu_269_p3) + unsigned(ap_const_lv6_1));
    add_ln200_1_fu_596_p2 <= std_logic_vector(unsigned(indvar_flatten196_load_reg_786) + unsigned(ap_const_lv9_1));
    add_ln200_fu_367_p2 <= std_logic_vector(unsigned(select_ln197_fu_327_p3) + unsigned(ap_const_lv6_1));
    add_ln202_fu_530_p2 <= std_logic_vector(unsigned(select_ln198_fu_385_p3) + unsigned(ap_const_lv3_1));
    add_ln203_1_fu_513_p2 <= std_logic_vector(unsigned(zext_ln203_2_fu_509_p1) + unsigned(zext_ln203_1_fu_493_p1));
    add_ln203_2_fu_487_p2 <= std_logic_vector(unsigned(zext_ln203_fu_483_p1) + unsigned(p_shl55_cast_fu_413_p1));
    add_ln203_4_fu_497_p2 <= std_logic_vector(unsigned(zext_ln202_2_fu_473_p1) + unsigned(ap_const_lv13_141C));
    add_ln203_5_fu_503_p2 <= std_logic_vector(unsigned(add_ln203_4_fu_497_p2) + unsigned(p_shl57_cast_fu_465_p1));
    add_ln203_6_fu_524_p2 <= std_logic_vector(unsigned(select_ln197_2_fu_359_p3) + unsigned(zext_ln202_1_fu_469_p1));
    add_ln203_fu_477_p2 <= std_logic_vector(unsigned(p_shl15_fu_417_p3) + unsigned(zext_ln200_fu_445_p1));
    add_ln205_1_fu_548_p2 <= std_logic_vector(unsigned(zext_ln197_fu_437_p1) + unsigned(zext_ln197_1_fu_441_p1));
    add_ln205_fu_558_p2 <= std_logic_vector(unsigned(zext_ln205_fu_554_p1) + unsigned(p_shl56_cast_fu_425_p1));
    and_ln195_1_fu_295_p2 <= (xor_ln195_fu_277_p2 and icmp_ln200_fu_289_p2);
    and_ln195_fu_347_p2 <= (xor_ln195_fu_277_p2 and icmp_ln202_fu_283_p2);
    and_ln197_fu_353_p2 <= (or_ln197_1_fu_341_p2 and and_ln195_fu_347_p2);
    and_ln205_fu_703_p2 <= (or_ln205_fu_697_p2 and grp_fu_1469_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln195_reg_796)
    begin
        if (((icmp_ln195_reg_796 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    arrayidx51_sum_cast_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx51_sum_fu_648_p2),64));
    arrayidx51_sum_fu_648_p2 <= std_logic_vector(unsigned(zext_ln195_fu_645_p1) + unsigned(ap_const_lv14_281C));
    bitcast_ln203_fu_630_p1 <= Weights_load_88_reg_844;
    bitcast_ln205_fu_668_p1 <= add28_i7_reg_899;
    empty_147_fu_664_p1 <= Weights_load_reg_884;
    empty_148_fu_453_p1 <= select_ln200_fu_393_p3(5 - 1 downto 0);
    empty_fu_401_p1 <= select_ln195_1_fu_307_p3(5 - 1 downto 0);
    grp_fu_1453_p_ce <= ap_const_logic_1;
    grp_fu_1453_p_din0 <= grp_fu_177_p0;
    grp_fu_1453_p_din1 <= grp_fu_177_p1;
    grp_fu_1453_p_opcode <= ap_const_lv2_0;
    grp_fu_1461_p_ce <= ap_const_logic_1;
    grp_fu_1461_p_din0 <= bitcast_ln203_fu_630_p1;
    grp_fu_1461_p_din1 <= OutPadConv7_load_reg_859;
    grp_fu_1469_p_ce <= ap_const_logic_1;
    grp_fu_1469_p_din0 <= add28_i7_reg_899;
    grp_fu_1469_p_din1 <= ap_const_lv32_0;
    grp_fu_1469_p_opcode <= ap_const_lv5_4;

    grp_fu_177_p0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, select_ln197_1_fu_637_p3, s_reg_889, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_177_p0 <= s_reg_889;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_177_p0 <= select_ln197_1_fu_637_p3;
        else 
            grp_fu_177_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_177_p1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, mul21_i7_reg_869, empty_147_fu_664_p1, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_177_p1 <= empty_147_fu_664_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_177_p1 <= mul21_i7_reg_869;
        else 
            grp_fu_177_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_721_p0 <= grp_fu_721_p00(6 - 1 downto 0);
    grp_fu_721_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln200_fu_393_p3),11));
    grp_fu_721_p1 <= ap_const_lv11_2C(6 - 1 downto 0);
    grp_fu_721_p2 <= grp_fu_721_p20(6 - 1 downto 0);
    grp_fu_721_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_6_reg_826),11));
    icmp_ln195_fu_239_p2 <= "1" when (indvar_flatten235_fu_122 = ap_const_lv18_32000) else "0";
    icmp_ln197_fu_263_p2 <= "1" when (indvar_flatten211_fu_114 = ap_const_lv14_1900) else "0";
    icmp_ln200_1_fu_542_p2 <= "1" when (select_ln200_fu_393_p3 = ap_const_lv6_1F) else "0";
    icmp_ln200_fu_289_p2 <= "1" when (indvar_flatten196_fu_106 = ap_const_lv9_A0) else "0";
    icmp_ln202_1_fu_536_p2 <= "1" when (add_ln202_fu_530_p2 = ap_const_lv3_5) else "0";
    icmp_ln202_fu_283_p2 <= "1" when (j_fu_98 = ap_const_lv3_5) else "0";
    icmp_ln205_1_fu_691_p2 <= "1" when (trunc_ln205_fu_681_p1 = ap_const_lv23_0) else "0";
    icmp_ln205_fu_685_p2 <= "0" when (tmp_s_fu_671_p4 = ap_const_lv8_FF) else "1";
    or_ln197_1_fu_341_p2 <= (xor_ln197_fu_335_p2 or icmp_ln197_fu_263_p2);
    or_ln197_fu_321_p2 <= (icmp_ln197_fu_263_p2 or and_ln195_1_fu_295_p2);
    or_ln198_1_fu_379_p2 <= (or_ln198_fu_373_p2 or icmp_ln197_fu_263_p2);
    or_ln198_fu_373_p2 <= (and_ln197_fu_353_p2 or and_ln195_1_fu_295_p2);
    or_ln205_fu_697_p2 <= (icmp_ln205_fu_685_p2 or icmp_ln205_1_fu_691_p2);
    p_shl15_fu_417_p3 <= (empty_fu_401_p1 & ap_const_lv5_0);
    p_shl16_fu_429_p3 <= (empty_fu_401_p1 & ap_const_lv3_0);
    p_shl17_fu_457_p3 <= (empty_148_fu_453_p1 & ap_const_lv2_0);
    p_shl55_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_405_p3),13));
    p_shl56_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl15_fu_417_p3),11));
    p_shl57_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl17_fu_457_p3),13));
    p_shl_fu_405_p3 <= (empty_fu_401_p1 & ap_const_lv7_0);
    select_ln195_1_fu_307_p3 <= 
        add_ln195_1_fu_301_p2 when (icmp_ln197_fu_263_p2(0) = '1') else 
        n_fu_118;
    select_ln195_fu_269_p3 <= 
        ap_const_lv6_0 when (icmp_ln197_fu_263_p2(0) = '1') else 
        y_fu_110;
    select_ln197_1_fu_637_p3 <= 
        ap_const_lv32_0 when (or_ln197_reg_810_pp0_iter1_reg(0) = '1') else 
        s_130_fu_94;
    select_ln197_2_fu_359_p3 <= 
        add_ln197_fu_315_p2 when (and_ln195_1_fu_295_p2(0) = '1') else 
        select_ln195_fu_269_p3;
    select_ln197_3_fu_613_p3 <= 
        ap_const_lv14_1 when (icmp_ln197_reg_800(0) = '1') else 
        add_ln197_1_fu_608_p2;
    select_ln197_fu_327_p3 <= 
        ap_const_lv6_0 when (or_ln197_fu_321_p2(0) = '1') else 
        k_fu_102;
    select_ln198_fu_385_p3 <= 
        ap_const_lv3_0 when (or_ln198_1_fu_379_p2(0) = '1') else 
        j_fu_98;
    select_ln200_1_fu_601_p3 <= 
        ap_const_lv9_1 when (or_ln197_reg_810(0) = '1') else 
        add_ln200_1_fu_596_p2;
    select_ln200_fu_393_p3 <= 
        add_ln200_fu_367_p2 when (and_ln197_fu_353_p2(0) = '1') else 
        select_ln197_fu_327_p3;
    tmp_s_fu_671_p4 <= bitcast_ln205_fu_668_p1(30 downto 23);
    trunc_ln205_fu_681_p1 <= bitcast_ln205_fu_668_p1(23 - 1 downto 0);
    xor_ln195_fu_277_p2 <= (icmp_ln197_fu_263_p2 xor ap_const_lv1_1);
    xor_ln197_fu_335_p2 <= (icmp_ln200_fu_289_p2 xor ap_const_lv1_1);
    zext_ln195_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln195_1_reg_805_pp0_iter1_reg),14));
    zext_ln197_1_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln197_2_fu_359_p3),9));
    zext_ln197_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl16_fu_429_p3),9));
    zext_ln200_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln200_fu_393_p3),10));
    zext_ln202_1_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln198_fu_385_p3),6));
    zext_ln202_2_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln198_fu_385_p3),13));
    zext_ln203_1_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_2_fu_487_p2),14));
    zext_ln203_2_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_5_fu_503_p2),14));
    zext_ln203_3_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_1_fu_513_p2),64));
    zext_ln203_5_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_721_p3),64));
    zext_ln203_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_fu_477_p2),13));
    zext_ln205_1_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln205_reg_839_pp0_iter4_reg),64));
    zext_ln205_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln205_1_fu_548_p2),11));
end behav;
