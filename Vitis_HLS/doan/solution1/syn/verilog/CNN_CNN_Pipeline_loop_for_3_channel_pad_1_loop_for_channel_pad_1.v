// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_for_3_channel_pad_1_loop_for_channel_pad_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        OutPadConv1_address0,
        OutPadConv1_ce0,
        OutPadConv1_we0,
        OutPadConv1_d0,
        OutConv0_address0,
        OutConv0_ce0,
        OutConv0_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] OutPadConv1_address0;
output   OutPadConv1_ce0;
output   OutPadConv1_we0;
output  [31:0] OutPadConv1_d0;
output  [10:0] OutConv0_address0;
output   OutConv0_ce0;
input  [31:0] OutConv0_q0;

reg ap_idle;
reg OutPadConv1_ce0;
reg OutPadConv1_we0;
reg OutConv0_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln29_fu_114_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [8:0] select_ln29_fu_138_p3;
reg   [8:0] select_ln29_reg_310;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] select_ln29_1_fu_152_p3;
reg   [2:0] select_ln29_1_reg_316;
wire   [0:0] icmp_ln32_fu_178_p2;
reg   [0:0] icmp_ln32_reg_321;
wire   [63:0] zext_ln32_2_fu_214_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln32_fu_272_p1;
reg   [8:0] n_fu_58;
wire   [8:0] add_ln31_fu_219_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_n_load;
reg   [2:0] c_fu_62;
reg   [2:0] ap_sig_allocacmp_c_load;
reg   [10:0] indvar_flatten6_fu_66;
wire   [10:0] add_ln29_fu_120_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten6_load;
wire   [0:0] icmp_ln31_fu_132_p2;
wire   [2:0] add_ln29_1_fu_146_p2;
wire   [7:0] tmp_fu_168_p4;
wire   [1:0] empty_141_fu_160_p1;
wire   [9:0] tmp1_fu_184_p4;
wire   [9:0] zext_ln31_1_fu_164_p1;
wire   [9:0] add_ln32_1_fu_198_p2;
wire  signed [10:0] sext_ln32_fu_204_p1;
wire   [10:0] zext_ln32_1_fu_194_p1;
wire   [10:0] add_ln32_2_fu_208_p2;
wire   [2:0] empty_fu_243_p0;
wire   [9:0] empty_fu_243_p2;
wire   [0:0] icmp_ln32_1_fu_256_p2;
wire   [10:0] zext_ln31_fu_253_p1;
wire   [10:0] p_cast52_cast_fu_249_p1;
wire   [10:0] add_ln32_fu_266_p2;
wire   [0:0] or_ln32_fu_261_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [9:0] empty_fu_243_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 n_fu_58 = 9'd0;
#0 c_fu_62 = 3'd0;
#0 indvar_flatten6_fu_66 = 11'd0;
#0 ap_done_reg = 1'b0;
end

CNN_mul_3ns_10ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mul_3ns_10ns_10_1_1_U11(
    .din0(empty_fu_243_p0),
    .din1(10'd324),
    .dout(empty_fu_243_p2)
);

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln29_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            c_fu_62 <= select_ln29_1_fu_152_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            c_fu_62 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln29_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_66 <= add_ln29_fu_120_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_66 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln29_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            n_fu_58 <= add_ln31_fu_219_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_fu_58 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln32_reg_321 <= icmp_ln32_fu_178_p2;
        select_ln29_1_reg_316 <= select_ln29_1_fu_152_p3;
        select_ln29_reg_310 <= select_ln29_fu_138_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutConv0_ce0 = 1'b1;
    end else begin
        OutConv0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutPadConv1_ce0 = 1'b1;
    end else begin
        OutPadConv1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutPadConv1_we0 = 1'b1;
    end else begin
        OutPadConv1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_114_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_c_load = 3'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_n_load = 9'd0;
    end else begin
        ap_sig_allocacmp_n_load = n_fu_58;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv0_address0 = zext_ln32_2_fu_214_p1;

assign OutPadConv1_address0 = zext_ln32_fu_272_p1;

assign OutPadConv1_d0 = ((or_ln32_fu_261_p2[0:0] == 1'b1) ? 32'd0 : OutConv0_q0);

assign add_ln29_1_fu_146_p2 = (ap_sig_allocacmp_c_load + 3'd1);

assign add_ln29_fu_120_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 11'd1);

assign add_ln31_fu_219_p2 = (select_ln29_fu_138_p3 + 9'd1);

assign add_ln32_1_fu_198_p2 = ($signed(zext_ln31_1_fu_164_p1) + $signed(10'd1022));

assign add_ln32_2_fu_208_p2 = ($signed(sext_ln32_fu_204_p1) + $signed(zext_ln32_1_fu_194_p1));

assign add_ln32_fu_266_p2 = (zext_ln31_fu_253_p1 + p_cast52_cast_fu_249_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_141_fu_160_p1 = select_ln29_1_fu_152_p3[1:0];

assign empty_fu_243_p0 = empty_fu_243_p00;

assign empty_fu_243_p00 = select_ln29_1_reg_316;

assign icmp_ln29_fu_114_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 11'd1296) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_132_p2 = ((ap_sig_allocacmp_n_load == 9'd324) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_256_p2 = ((select_ln29_reg_310 > 9'd321) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_178_p2 = ((tmp_fu_168_p4 == 8'd0) ? 1'b1 : 1'b0);

assign or_ln32_fu_261_p2 = (icmp_ln32_reg_321 | icmp_ln32_1_fu_256_p2);

assign p_cast52_cast_fu_249_p1 = empty_fu_243_p2;

assign select_ln29_1_fu_152_p3 = ((icmp_ln31_fu_132_p2[0:0] == 1'b1) ? add_ln29_1_fu_146_p2 : ap_sig_allocacmp_c_load);

assign select_ln29_fu_138_p3 = ((icmp_ln31_fu_132_p2[0:0] == 1'b1) ? 9'd0 : ap_sig_allocacmp_n_load);

assign sext_ln32_fu_204_p1 = $signed(add_ln32_1_fu_198_p2);

assign tmp1_fu_184_p4 = {{{empty_141_fu_160_p1}, {empty_141_fu_160_p1}}, {6'd0}};

assign tmp_fu_168_p4 = {{select_ln29_fu_138_p3[8:1]}};

assign zext_ln31_1_fu_164_p1 = select_ln29_fu_138_p3;

assign zext_ln31_fu_253_p1 = select_ln29_reg_310;

assign zext_ln32_1_fu_194_p1 = tmp1_fu_184_p4;

assign zext_ln32_2_fu_214_p1 = add_ln32_2_fu_208_p2;

assign zext_ln32_fu_272_p1 = add_ln32_fu_266_p2;

endmodule //CNN_CNN_Pipeline_loop_for_3_channel_pad_1_loop_for_channel_pad_1
