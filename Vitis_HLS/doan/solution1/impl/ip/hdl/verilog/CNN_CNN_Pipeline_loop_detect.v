// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_detect (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        maxindex,
        out_Dense_address0,
        out_Dense_ce0,
        out_Dense_q0,
        conv6_i_out,
        conv6_i_out_ap_vld,
        grp_fu_1469_p_din0,
        grp_fu_1469_p_din1,
        grp_fu_1469_p_opcode,
        grp_fu_1469_p_dout0,
        grp_fu_1469_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] maxindex;
output  [2:0] out_Dense_address0;
output   out_Dense_ce0;
input  [31:0] out_Dense_q0;
output  [31:0] conv6_i_out;
output   conv6_i_out_ap_vld;
output  [31:0] grp_fu_1469_p_din0;
output  [31:0] grp_fu_1469_p_din1;
output  [4:0] grp_fu_1469_p_opcode;
input  [0:0] grp_fu_1469_p_dout0;
output   grp_fu_1469_p_ce;

reg ap_idle;
reg out_Dense_ce0;
reg conv6_i_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln26_fu_110_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] i_reg_275;
reg   [0:0] icmp_ln26_reg_280;
reg   [0:0] icmp_ln26_reg_280_pp0_iter1_reg;
reg   [31:0] maxindex_1_load_reg_294;
reg   [31:0] maxindex_2_reg_301;
wire   [63:0] zext_ln26_fu_132_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] maxindex_1_fu_46;
wire   [31:0] maxindex_3_fu_233_p3;
reg   [31:0] ap_sig_allocacmp_maxindex_1_load;
wire    ap_loop_init;
reg   [31:0] conv6_i_fu_50;
wire   [31:0] select_ln27_fu_225_p3;
reg   [2:0] i_2_fu_54;
wire   [2:0] add_ln26_fu_121_p2;
reg   [2:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_84_p0;
wire   [31:0] bitcast_ln27_fu_143_p1;
wire   [31:0] bitcast_ln27_1_fu_160_p1;
wire   [7:0] tmp_s_fu_146_p4;
wire   [22:0] trunc_ln27_fu_156_p1;
wire   [0:0] icmp_ln27_1_fu_183_p2;
wire   [0:0] icmp_ln27_fu_177_p2;
wire   [7:0] tmp_18_fu_163_p4;
wire   [22:0] trunc_ln27_1_fu_173_p1;
wire   [0:0] icmp_ln27_3_fu_201_p2;
wire   [0:0] icmp_ln27_2_fu_195_p2;
wire   [0:0] or_ln27_fu_189_p2;
wire   [0:0] and_ln27_fu_213_p2;
wire   [0:0] or_ln27_1_fu_207_p2;
wire   [0:0] and_ln27_1_fu_219_p2;
wire   [31:0] grp_fu_84_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 maxindex_1_fu_46 = 32'd0;
#0 conv6_i_fu_50 = 32'd0;
#0 i_2_fu_54 = 3'd0;
#0 ap_done_reg = 1'b0;
end

CNN_sitofp_32ns_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_4_no_dsp_1_U192(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_84_p0),
    .ce(1'b1),
    .dout(grp_fu_84_p1)
);

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            conv6_i_fu_50 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            conv6_i_fu_50 <= select_ln27_fu_225_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln26_fu_110_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_54 <= add_ln26_fu_121_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_54 <= 3'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            maxindex_1_fu_46 <= maxindex;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            maxindex_1_fu_46 <= maxindex_3_fu_233_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_reg_275 <= ap_sig_allocacmp_i;
        icmp_ln26_reg_280 <= icmp_ln26_fu_110_p2;
        icmp_ln26_reg_280_pp0_iter1_reg <= icmp_ln26_reg_280;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        maxindex_1_load_reg_294 <= ap_sig_allocacmp_maxindex_1_load;
        maxindex_2_reg_301 <= out_Dense_q0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_110_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 3'd1;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_maxindex_1_load = maxindex_3_fu_233_p3;
    end else begin
        ap_sig_allocacmp_maxindex_1_load = maxindex_1_fu_46;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_280_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv6_i_out_ap_vld = 1'b1;
    end else begin
        conv6_i_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_Dense_ce0 = 1'b1;
    end else begin
        out_Dense_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_121_p2 = (ap_sig_allocacmp_i + 3'd1);

assign and_ln27_1_fu_219_p2 = (or_ln27_1_fu_207_p2 & and_ln27_fu_213_p2);

assign and_ln27_fu_213_p2 = (or_ln27_fu_189_p2 & grp_fu_1469_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln27_1_fu_160_p1 = maxindex_1_load_reg_294;

assign bitcast_ln27_fu_143_p1 = maxindex_2_reg_301;

assign conv6_i_out = conv6_i_fu_50;

assign grp_fu_1469_p_ce = 1'b1;

assign grp_fu_1469_p_din0 = out_Dense_q0;

assign grp_fu_1469_p_din1 = ap_sig_allocacmp_maxindex_1_load;

assign grp_fu_1469_p_opcode = 5'd2;

assign grp_fu_84_p0 = ap_sig_allocacmp_i;

assign icmp_ln26_fu_110_p2 = ((ap_sig_allocacmp_i == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln27_1_fu_183_p2 = ((trunc_ln27_fu_156_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_2_fu_195_p2 = ((tmp_18_fu_163_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln27_3_fu_201_p2 = ((trunc_ln27_1_fu_173_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_177_p2 = ((tmp_s_fu_146_p4 != 8'd255) ? 1'b1 : 1'b0);

assign maxindex_3_fu_233_p3 = ((and_ln27_1_fu_219_p2[0:0] == 1'b1) ? maxindex_2_reg_301 : maxindex_1_load_reg_294);

assign or_ln27_1_fu_207_p2 = (icmp_ln27_3_fu_201_p2 | icmp_ln27_2_fu_195_p2);

assign or_ln27_fu_189_p2 = (icmp_ln27_fu_177_p2 | icmp_ln27_1_fu_183_p2);

assign out_Dense_address0 = zext_ln26_fu_132_p1;

assign select_ln27_fu_225_p3 = ((and_ln27_1_fu_219_p2[0:0] == 1'b1) ? grp_fu_84_p1 : conv6_i_fu_50);

assign tmp_18_fu_163_p4 = {{bitcast_ln27_1_fu_160_p1[30:23]}};

assign tmp_s_fu_146_p4 = {{bitcast_ln27_fu_143_p1[30:23]}};

assign trunc_ln27_1_fu_173_p1 = bitcast_ln27_1_fu_160_p1[22:0];

assign trunc_ln27_fu_156_p1 = bitcast_ln27_fu_143_p1[22:0];

assign zext_ln26_fu_132_p1 = i_reg_275;

endmodule //CNN_CNN_Pipeline_loop_detect
