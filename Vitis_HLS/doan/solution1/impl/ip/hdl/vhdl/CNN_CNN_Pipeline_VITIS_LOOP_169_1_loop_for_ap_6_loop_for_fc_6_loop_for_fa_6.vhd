-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_VITIS_LOOP_169_1_loop_for_ap_6_loop_for_fc_6_loop_for_fa_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce0 : OUT STD_LOGIC;
    Weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce1 : OUT STD_LOGIC;
    Weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutPadConv6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OutPadConv6_ce0 : OUT STD_LOGIC;
    OutPadConv6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutConv6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv6_ce0 : OUT STD_LOGIC;
    OutConv6_we0 : OUT STD_LOGIC;
    OutConv6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1453_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_ce : OUT STD_LOGIC;
    grp_fu_1461_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1461_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1461_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1461_p_ce : OUT STD_LOGIC;
    grp_fu_1469_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1469_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1469_p_ce : OUT STD_LOGIC );
end;


architecture behav of CNN_CNN_Pipeline_VITIS_LOOP_169_1_loop_for_ap_6_loop_for_fc_6_loop_for_fa_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_19000 : STD_LOGIC_VECTOR (16 downto 0) := "11001000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv13_C80 : STD_LOGIC_VECTOR (12 downto 0) := "0110010000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_9FC : STD_LOGIC_VECTOR (11 downto 0) := "100111111100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_13FC : STD_LOGIC_VECTOR (12 downto 0) := "1001111111100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_2C : STD_LOGIC_VECTOR (9 downto 0) := "0000101100";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln169_reg_804 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten143_load_reg_794 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal indvar_flatten158_load_reg_799 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln169_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln169_1_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln169_1_reg_814 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln169_1_fu_300_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln169_1_reg_819 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln169_1_reg_819_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln171_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln171_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln171_reg_824_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln172_fu_364_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln172_reg_830 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_380_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_835 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_835_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_835_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_835_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_835_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln176_1_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_reg_851 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_reg_851_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_reg_851_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_reg_851_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_reg_851_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_1_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_1_reg_855 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_1_reg_855_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_1_reg_855_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_1_reg_855_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_1_reg_855_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Weights_load_89_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal select_ln171_2_fu_533_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln171_2_reg_864 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal select_ln171_2_reg_864_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln171_2_reg_864_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln171_2_reg_864_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal OutPadConv6_load_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln177_fu_596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i6_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln171_1_fu_603_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Weights_load_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_909 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_149_fu_630_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add28_i6_reg_919 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln177_3_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln177_5_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal arrayidx45_sum_cast_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln179_1_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal s_128_fu_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_102 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln176_fu_479_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_fu_106 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln174_fu_372_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten143_fu_110 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln174_1_fu_567_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_fu_114 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal indvar_flatten158_fu_118 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal select_ln171_3_fu_579_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_fu_122 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal indvar_flatten182_fu_126 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln169_fu_249_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_181_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_181_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal icmp_ln174_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln169_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln169_1_fu_294_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln171_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln169_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln171_1_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln171_fu_314_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln171_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln172_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln172_1_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln174_fu_346_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_384_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_150_fu_412_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl21_fu_416_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl18_fu_396_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln174_fu_404_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln177_fu_432_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln177_fu_438_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl48_cast_fu_392_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln177_2_fu_442_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln176_2_fu_428_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln177_4_fu_452_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl50_cast_fu_424_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln177_5_fu_458_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln177_2_fu_464_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln177_1_fu_448_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln177_1_fu_468_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln169_fu_520_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln171_fu_527_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln176_1_fu_540_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln177_6_fu_543_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_729_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln174_1_fu_562_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln171_1_fu_574_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln169_fu_611_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal arrayidx45_sum_fu_614_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl19_fu_634_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl20_fu_645_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln179_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_662_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln179_fu_672_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln179_1_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln179_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln179_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln171_fu_652_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln171_1_fu_656_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln179_1_fu_700_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln179_fu_706_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl46_cast_fu_641_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln179_fu_710_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln179_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_729_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_729_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_729_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal grp_fu_729_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_729_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_mac_muladd_5ns_6ns_6ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_5ns_6ns_6ns_10_4_1_U89 : component CNN_mac_muladd_5ns_6ns_6ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_729_p0,
        din1 => grp_fu_729_p1,
        din2 => grp_fu_729_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_729_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten143_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten143_fu_110 <= ap_const_lv8_0;
                elsif (((icmp_ln169_reg_804 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten143_fu_110 <= select_ln174_1_fu_567_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten158_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten158_fu_118 <= ap_const_lv13_0;
                elsif (((icmp_ln169_reg_804 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten158_fu_118 <= select_ln171_3_fu_579_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten182_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten182_fu_126 <= ap_const_lv17_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln169_fu_243_p2 = ap_const_lv1_0))) then 
                indvar_flatten182_fu_126 <= add_ln169_fu_249_p2;
            end if; 
        end if;
    end process;

    j_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_102 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln169_fu_243_p2 = ap_const_lv1_0))) then 
                j_fu_102 <= add_ln176_fu_479_p2;
            end if; 
        end if;
    end process;

    k_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_fu_106 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln169_fu_243_p2 = ap_const_lv1_0))) then 
                k_fu_106 <= select_ln174_fu_372_p3;
            end if; 
        end if;
    end process;

    n_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                n_fu_122 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln169_fu_243_p2 = ap_const_lv1_0))) then 
                n_fu_122 <= select_ln169_1_fu_300_p3;
            end if; 
        end if;
    end process;

    s_128_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    s_128_fu_98 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    s_128_fu_98 <= grp_fu_1453_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                y_fu_114 <= ap_const_lv6_0;
            elsif (((icmp_ln169_reg_804 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                y_fu_114 <= select_ln171_2_fu_533_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                OutPadConv6_load_reg_879 <= OutPadConv6_q0;
                and_ln169_1_reg_814 <= and_ln169_1_fu_288_p2;
                empty_reg_835 <= empty_fu_380_p1;
                empty_reg_835_pp0_iter1_reg <= empty_reg_835;
                empty_reg_835_pp0_iter2_reg <= empty_reg_835_pp0_iter1_reg;
                empty_reg_835_pp0_iter3_reg <= empty_reg_835_pp0_iter2_reg;
                empty_reg_835_pp0_iter4_reg <= empty_reg_835_pp0_iter3_reg;
                icmp_ln169_reg_804 <= icmp_ln169_fu_243_p2;
                icmp_ln171_reg_808 <= icmp_ln171_fu_264_p2;
                icmp_ln174_1_reg_855 <= icmp_ln174_1_fu_491_p2;
                icmp_ln174_1_reg_855_pp0_iter1_reg <= icmp_ln174_1_reg_855;
                icmp_ln174_1_reg_855_pp0_iter2_reg <= icmp_ln174_1_reg_855_pp0_iter1_reg;
                icmp_ln174_1_reg_855_pp0_iter3_reg <= icmp_ln174_1_reg_855_pp0_iter2_reg;
                icmp_ln174_1_reg_855_pp0_iter4_reg <= icmp_ln174_1_reg_855_pp0_iter3_reg;
                icmp_ln176_1_reg_851 <= icmp_ln176_1_fu_485_p2;
                icmp_ln176_1_reg_851_pp0_iter1_reg <= icmp_ln176_1_reg_851;
                icmp_ln176_1_reg_851_pp0_iter2_reg <= icmp_ln176_1_reg_851_pp0_iter1_reg;
                icmp_ln176_1_reg_851_pp0_iter3_reg <= icmp_ln176_1_reg_851_pp0_iter2_reg;
                icmp_ln176_1_reg_851_pp0_iter4_reg <= icmp_ln176_1_reg_851_pp0_iter3_reg;
                indvar_flatten143_load_reg_794 <= indvar_flatten143_fu_110;
                indvar_flatten158_load_reg_799 <= indvar_flatten158_fu_118;
                or_ln171_reg_824 <= or_ln171_fu_308_p2;
                or_ln171_reg_824_pp0_iter1_reg <= or_ln171_reg_824;
                select_ln169_1_reg_819 <= select_ln169_1_fu_300_p3;
                select_ln169_1_reg_819_pp0_iter1_reg <= select_ln169_1_reg_819;
                select_ln172_reg_830 <= select_ln172_fu_364_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                Weights_load_89_reg_859 <= Weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                Weights_load_reg_904 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add28_i6_reg_919 <= grp_fu_1453_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                select_ln171_2_reg_864 <= select_ln171_2_fu_533_p3;
                select_ln171_2_reg_864_pp0_iter1_reg <= select_ln171_2_reg_864;
                select_ln171_2_reg_864_pp0_iter2_reg <= select_ln171_2_reg_864_pp0_iter1_reg;
                select_ln171_2_reg_864_pp0_iter3_reg <= select_ln171_2_reg_864_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul21_i6_reg_889 <= grp_fu_1461_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                s_reg_909 <= grp_fu_1453_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to4, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    OutConv6_address0 <= zext_ln179_1_fu_716_p1(11 - 1 downto 0);

    OutConv6_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            OutConv6_ce0 <= ap_const_logic_1;
        else 
            OutConv6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OutConv6_d0 <= 
        ap_const_lv32_0 when (and_ln179_fu_694_p2(0) = '1') else 
        add28_i6_reg_919;

    OutConv6_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, icmp_ln176_1_reg_851_pp0_iter4_reg, icmp_ln174_1_reg_855_pp0_iter4_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln174_1_reg_855_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln176_1_reg_851_pp0_iter4_reg = ap_const_lv1_1))) then 
            OutConv6_we0 <= ap_const_logic_1;
        else 
            OutConv6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv6_address0 <= zext_ln177_5_fu_558_p1(10 - 1 downto 0);

    OutPadConv6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPadConv6_ce0 <= ap_const_logic_1;
        else 
            OutPadConv6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Weights_address0 <= arrayidx45_sum_cast_fu_620_p1(14 - 1 downto 0);
    Weights_address1 <= zext_ln177_3_fu_474_p1(14 - 1 downto 0);

    Weights_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Weights_ce0 <= ap_const_logic_1;
        else 
            Weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Weights_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Weights_ce1 <= ap_const_logic_1;
        else 
            Weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln169_1_fu_294_p2 <= std_logic_vector(unsigned(n_fu_122) + unsigned(ap_const_lv6_1));
    add_ln169_fu_249_p2 <= std_logic_vector(unsigned(indvar_flatten182_fu_126) + unsigned(ap_const_lv17_1));
    add_ln171_1_fu_574_p2 <= std_logic_vector(unsigned(indvar_flatten158_load_reg_799) + unsigned(ap_const_lv13_1));
    add_ln171_fu_527_p2 <= std_logic_vector(unsigned(select_ln169_fu_520_p3) + unsigned(ap_const_lv6_1));
    add_ln174_1_fu_562_p2 <= std_logic_vector(unsigned(indvar_flatten143_load_reg_794) + unsigned(ap_const_lv8_1));
    add_ln174_fu_346_p2 <= std_logic_vector(unsigned(select_ln171_fu_314_p3) + unsigned(ap_const_lv5_1));
    add_ln176_fu_479_p2 <= std_logic_vector(unsigned(select_ln172_fu_364_p3) + unsigned(ap_const_lv3_1));
    add_ln177_1_fu_468_p2 <= std_logic_vector(unsigned(zext_ln177_2_fu_464_p1) + unsigned(zext_ln177_1_fu_448_p1));
    add_ln177_2_fu_442_p2 <= std_logic_vector(unsigned(zext_ln177_fu_438_p1) + unsigned(p_shl48_cast_fu_392_p1));
    add_ln177_4_fu_452_p2 <= std_logic_vector(unsigned(zext_ln176_2_fu_428_p1) + unsigned(ap_const_lv12_9FC));
    add_ln177_5_fu_458_p2 <= std_logic_vector(unsigned(add_ln177_4_fu_452_p2) + unsigned(p_shl50_cast_fu_424_p1));
    add_ln177_6_fu_543_p2 <= std_logic_vector(unsigned(select_ln171_2_fu_533_p3) + unsigned(zext_ln176_1_fu_540_p1));
    add_ln177_fu_432_p2 <= std_logic_vector(unsigned(p_shl18_fu_396_p3) + unsigned(zext_ln174_fu_404_p1));
    add_ln179_1_fu_700_p2 <= std_logic_vector(unsigned(zext_ln171_fu_652_p1) + unsigned(zext_ln171_1_fu_656_p1));
    add_ln179_fu_710_p2 <= std_logic_vector(unsigned(zext_ln179_fu_706_p1) + unsigned(p_shl46_cast_fu_641_p1));
    and_ln169_1_fu_288_p2 <= (xor_ln169_fu_270_p2 and icmp_ln174_fu_282_p2);
    and_ln169_fu_334_p2 <= (xor_ln169_fu_270_p2 and icmp_ln176_fu_276_p2);
    and_ln171_fu_340_p2 <= (or_ln171_1_fu_328_p2 and and_ln169_fu_334_p2);
    and_ln179_fu_694_p2 <= (or_ln179_fu_688_p2 and grp_fu_1469_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln169_reg_804)
    begin
        if (((icmp_ln169_reg_804 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    arrayidx45_sum_cast_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx45_sum_fu_614_p2),64));
    arrayidx45_sum_fu_614_p2 <= std_logic_vector(unsigned(zext_ln169_fu_611_p1) + unsigned(ap_const_lv13_13FC));
    bitcast_ln177_fu_596_p1 <= Weights_load_89_reg_859;
    bitcast_ln179_fu_659_p1 <= add28_i6_reg_919;
    empty_149_fu_630_p1 <= Weights_load_reg_904;
    empty_150_fu_412_p1 <= select_ln174_fu_372_p3(4 - 1 downto 0);
    empty_fu_380_p1 <= select_ln169_1_fu_300_p3(5 - 1 downto 0);
    grp_fu_1453_p_ce <= ap_const_logic_1;
    grp_fu_1453_p_din0 <= grp_fu_181_p0;
    grp_fu_1453_p_din1 <= grp_fu_181_p1;
    grp_fu_1453_p_opcode <= ap_const_lv2_0;
    grp_fu_1461_p_ce <= ap_const_logic_1;
    grp_fu_1461_p_din0 <= bitcast_ln177_fu_596_p1;
    grp_fu_1461_p_din1 <= OutPadConv6_load_reg_879;
    grp_fu_1469_p_ce <= ap_const_logic_1;
    grp_fu_1469_p_din0 <= add28_i6_reg_919;
    grp_fu_1469_p_din1 <= ap_const_lv32_0;
    grp_fu_1469_p_opcode <= ap_const_lv5_4;

    grp_fu_181_p0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, select_ln171_1_fu_603_p3, s_reg_909, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_181_p0 <= s_reg_909;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_181_p0 <= select_ln171_1_fu_603_p3;
        else 
            grp_fu_181_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_181_p1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, mul21_i6_reg_889, empty_149_fu_630_p1, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_181_p1 <= empty_149_fu_630_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_181_p1 <= mul21_i6_reg_889;
        else 
            grp_fu_181_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_729_p0 <= grp_fu_729_p00(5 - 1 downto 0);
    grp_fu_729_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln174_fu_372_p3),10));
    grp_fu_729_p1 <= ap_const_lv10_2C(6 - 1 downto 0);
    grp_fu_729_p2 <= grp_fu_729_p20(6 - 1 downto 0);
    grp_fu_729_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln177_6_fu_543_p2),10));
    icmp_ln169_fu_243_p2 <= "1" when (indvar_flatten182_fu_126 = ap_const_lv17_19000) else "0";
    icmp_ln171_fu_264_p2 <= "1" when (indvar_flatten158_fu_118 = ap_const_lv13_C80) else "0";
    icmp_ln174_1_fu_491_p2 <= "1" when (select_ln174_fu_372_p3 = ap_const_lv5_F) else "0";
    icmp_ln174_fu_282_p2 <= "1" when (indvar_flatten143_fu_110 = ap_const_lv8_50) else "0";
    icmp_ln176_1_fu_485_p2 <= "1" when (add_ln176_fu_479_p2 = ap_const_lv3_5) else "0";
    icmp_ln176_fu_276_p2 <= "1" when (j_fu_102 = ap_const_lv3_5) else "0";
    icmp_ln179_1_fu_682_p2 <= "1" when (trunc_ln179_fu_672_p1 = ap_const_lv23_0) else "0";
    icmp_ln179_fu_676_p2 <= "0" when (tmp_s_fu_662_p4 = ap_const_lv8_FF) else "1";
    or_ln171_1_fu_328_p2 <= (xor_ln171_fu_322_p2 or icmp_ln171_fu_264_p2);
    or_ln171_fu_308_p2 <= (icmp_ln171_fu_264_p2 or and_ln169_1_fu_288_p2);
    or_ln172_1_fu_358_p2 <= (or_ln172_fu_352_p2 or icmp_ln171_fu_264_p2);
    or_ln172_fu_352_p2 <= (and_ln171_fu_340_p2 or and_ln169_1_fu_288_p2);
    or_ln179_fu_688_p2 <= (icmp_ln179_fu_676_p2 or icmp_ln179_1_fu_682_p2);
    p_shl18_fu_396_p3 <= (empty_fu_380_p1 & ap_const_lv4_0);
    p_shl19_fu_634_p3 <= (empty_reg_835_pp0_iter4_reg & ap_const_lv5_0);
    p_shl20_fu_645_p3 <= (empty_reg_835_pp0_iter4_reg & ap_const_lv3_0);
    p_shl21_fu_416_p3 <= (empty_150_fu_412_p1 & ap_const_lv2_0);
    p_shl46_cast_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl19_fu_634_p3),11));
    p_shl48_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_384_p3),12));
    p_shl50_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl21_fu_416_p3),12));
    p_shl_fu_384_p3 <= (empty_fu_380_p1 & ap_const_lv6_0);
    select_ln169_1_fu_300_p3 <= 
        add_ln169_1_fu_294_p2 when (icmp_ln171_fu_264_p2(0) = '1') else 
        n_fu_122;
    select_ln169_fu_520_p3 <= 
        ap_const_lv6_0 when (icmp_ln171_reg_808(0) = '1') else 
        y_fu_114;
    select_ln171_1_fu_603_p3 <= 
        ap_const_lv32_0 when (or_ln171_reg_824_pp0_iter1_reg(0) = '1') else 
        s_128_fu_98;
    select_ln171_2_fu_533_p3 <= 
        add_ln171_fu_527_p2 when (and_ln169_1_reg_814(0) = '1') else 
        select_ln169_fu_520_p3;
    select_ln171_3_fu_579_p3 <= 
        ap_const_lv13_1 when (icmp_ln171_reg_808(0) = '1') else 
        add_ln171_1_fu_574_p2;
    select_ln171_fu_314_p3 <= 
        ap_const_lv5_0 when (or_ln171_fu_308_p2(0) = '1') else 
        k_fu_106;
    select_ln172_fu_364_p3 <= 
        ap_const_lv3_0 when (or_ln172_1_fu_358_p2(0) = '1') else 
        j_fu_102;
    select_ln174_1_fu_567_p3 <= 
        ap_const_lv8_1 when (or_ln171_reg_824(0) = '1') else 
        add_ln174_1_fu_562_p2;
    select_ln174_fu_372_p3 <= 
        add_ln174_fu_346_p2 when (and_ln171_fu_340_p2(0) = '1') else 
        select_ln171_fu_314_p3;
    tmp_s_fu_662_p4 <= bitcast_ln179_fu_659_p1(30 downto 23);
    trunc_ln179_fu_672_p1 <= bitcast_ln179_fu_659_p1(23 - 1 downto 0);
    xor_ln169_fu_270_p2 <= (icmp_ln171_fu_264_p2 xor ap_const_lv1_1);
    xor_ln171_fu_322_p2 <= (icmp_ln174_fu_282_p2 xor ap_const_lv1_1);
    zext_ln169_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln169_1_reg_819_pp0_iter1_reg),13));
    zext_ln171_1_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln171_2_reg_864_pp0_iter3_reg),9));
    zext_ln171_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl20_fu_645_p3),9));
    zext_ln174_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln174_fu_372_p3),9));
    zext_ln176_1_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln172_reg_830),6));
    zext_ln176_2_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln172_fu_364_p3),12));
    zext_ln177_1_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln177_2_fu_442_p2),13));
    zext_ln177_2_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln177_5_fu_458_p2),13));
    zext_ln177_3_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln177_1_fu_468_p2),64));
    zext_ln177_5_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_729_p3),64));
    zext_ln177_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln177_fu_432_p2),12));
    zext_ln179_1_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln179_fu_710_p2),64));
    zext_ln179_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln179_1_fu_700_p2),11));
end behav;
