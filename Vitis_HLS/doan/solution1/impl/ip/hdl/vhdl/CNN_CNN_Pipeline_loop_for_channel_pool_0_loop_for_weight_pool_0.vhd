-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_channel_pool_0_loop_for_weight_pool_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OutConv1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv1_ce0 : OUT STD_LOGIC;
    OutConv1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutConv1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv1_ce1 : OUT STD_LOGIC;
    OutConv1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutPool0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OutPool0_ce0 : OUT STD_LOGIC;
    OutPool0_we0 : OUT STD_LOGIC;
    OutPool0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1469_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1469_p_ce : OUT STD_LOGIC;
    grp_fu_1473_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1473_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1473_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1473_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1473_p_ce : OUT STD_LOGIC );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_channel_pool_0_loop_for_weight_pool_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_C1200000 : STD_LOGIC_VECTOR (31 downto 0) := "11000001001000000000000000000000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln6_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln6_fu_171_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln6_reg_480 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln6_reg_480_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln6_reg_480_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_193_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_485 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_485_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_485_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln13_1_fu_244_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln13_1_reg_496 : STD_LOGIC_VECTOR (10 downto 0);
    signal pool_value_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_11_fu_316_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_11_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_value_4_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln14_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln14_1_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_68 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln19_fu_250_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_load : STD_LOGIC_VECTOR (7 downto 0);
    signal z_fu_72 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln6_1_fu_185_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_z_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten20_fu_76 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln6_fu_153_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten20_load : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln9_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln6_1_fu_179_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_197_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_211_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln13_fu_219_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_cast62_fu_207_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln13_fu_223_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln13_fu_234_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln13_1_fu_240_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln15_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_278_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln15_fu_288_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln15_1_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln15_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln15_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl9_fu_324_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_fu_335_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal bitcast_ln15_1_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln15_2_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_349_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln15_1_fu_359_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln15_3_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_2_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_366_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln15_2_fu_376_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln15_5_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_4_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln15_1_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln15_2_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln15_1_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln15_2_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln9_fu_342_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln17_1_fu_435_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln17_fu_440_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl9_cast_fu_331_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln17_fu_444_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten20_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln6_fu_147_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten20_fu_76 <= add_ln6_fu_153_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten20_fu_76 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln6_fu_147_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    y_fu_68 <= add_ln19_fu_250_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_68 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    z_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln6_fu_147_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    z_fu_72 <= select_ln6_1_fu_185_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    z_fu_72 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln13_1_reg_496(10 downto 1) <= add_ln13_1_fu_244_p2(10 downto 1);
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_485 <= empty_fu_193_p1;
                empty_reg_485_pp0_iter1_reg <= empty_reg_485;
                select_ln6_reg_480 <= select_ln6_fu_171_p3;
                select_ln6_reg_480_pp0_iter1_reg <= select_ln6_reg_480;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                empty_reg_485_pp0_iter2_reg <= empty_reg_485_pp0_iter1_reg;
                max_11_reg_513 <= max_11_fu_316_p3;
                select_ln6_reg_480_pp0_iter2_reg <= select_ln6_reg_480_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                pool_value_4_reg_520 <= OutConv1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                pool_value_reg_501 <= OutConv1_q1;
            end if;
        end if;
    end process;
    add_ln13_1_reg_496(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutConv1_address0 <= zext_ln14_1_fu_271_p1(11 - 1 downto 0);
    OutConv1_address1 <= zext_ln14_fu_229_p1(11 - 1 downto 0);

    OutConv1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutConv1_ce0 <= ap_const_logic_1;
        else 
            OutConv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OutConv1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutConv1_ce1 <= ap_const_logic_1;
        else 
            OutConv1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OutPool0_address0 <= zext_ln18_fu_450_p1(10 - 1 downto 0);

    OutPool0_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            OutPool0_ce0 <= ap_const_logic_1;
        else 
            OutPool0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OutPool0_d0 <= 
        pool_value_4_reg_520 when (and_ln15_2_fu_422_p2(0) = '1') else 
        max_11_reg_513;

    OutPool0_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            OutPool0_we0 <= ap_const_logic_1;
        else 
            OutPool0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln13_1_fu_244_p2 <= std_logic_vector(unsigned(zext_ln13_fu_219_p1) + unsigned(zext_ln13_1_fu_240_p1));
    add_ln13_fu_223_p2 <= std_logic_vector(unsigned(zext_ln13_fu_219_p1) + unsigned(p_cast62_fu_207_p1));
    add_ln17_1_fu_435_p2 <= std_logic_vector(unsigned(zext_ln9_fu_342_p1) + unsigned(select_ln6_reg_480_pp0_iter2_reg));
    add_ln17_fu_444_p2 <= std_logic_vector(unsigned(zext_ln17_fu_440_p1) + unsigned(p_shl9_cast_fu_331_p1));
    add_ln19_fu_250_p2 <= std_logic_vector(unsigned(select_ln6_fu_171_p3) + unsigned(ap_const_lv8_1));
    add_ln6_1_fu_179_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_z_load) + unsigned(ap_const_lv3_1));
    add_ln6_fu_153_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten20_load) + unsigned(ap_const_lv10_1));
    and_ln15_1_fu_416_p2 <= (or_ln15_2_fu_410_p2 and or_ln15_1_fu_392_p2);
    and_ln15_2_fu_422_p2 <= (grp_fu_1473_p_dout0 and and_ln15_1_fu_416_p2);
    and_ln15_fu_310_p2 <= (or_ln15_fu_304_p2 and grp_fu_1469_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln6_fu_147_p2)
    begin
        if (((icmp_ln6_fu_147_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten20_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten20_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten20_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten20_load <= indvar_flatten20_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_y_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_68, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_y_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_y_load <= y_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_z_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, z_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_z_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_z_load <= z_fu_72;
        end if; 
    end process;

    bitcast_ln15_1_fu_346_p1 <= pool_value_4_reg_520;
    bitcast_ln15_2_fu_363_p1 <= max_11_reg_513;
    bitcast_ln15_fu_275_p1 <= pool_value_reg_501;
    empty_fu_193_p1 <= select_ln6_1_fu_185_p3(2 - 1 downto 0);
    grp_fu_1469_p_ce <= ap_const_logic_1;
    grp_fu_1469_p_din0 <= OutConv1_q1;
    grp_fu_1469_p_din1 <= ap_const_lv32_C1200000;
    grp_fu_1469_p_opcode <= ap_const_lv5_2;
    grp_fu_1473_p_ce <= ap_const_logic_1;
    grp_fu_1473_p_din0 <= OutConv1_q0;
    grp_fu_1473_p_din1 <= max_11_fu_316_p3;
    grp_fu_1473_p_opcode <= ap_const_lv5_2;
    icmp_ln15_1_fu_298_p2 <= "1" when (trunc_ln15_fu_288_p1 = ap_const_lv23_0) else "0";
    icmp_ln15_2_fu_380_p2 <= "0" when (tmp_10_fu_349_p4 = ap_const_lv8_FF) else "1";
    icmp_ln15_3_fu_386_p2 <= "1" when (trunc_ln15_1_fu_359_p1 = ap_const_lv23_0) else "0";
    icmp_ln15_4_fu_398_p2 <= "0" when (tmp_11_fu_366_p4 = ap_const_lv8_FF) else "1";
    icmp_ln15_5_fu_404_p2 <= "1" when (trunc_ln15_2_fu_376_p1 = ap_const_lv23_0) else "0";
    icmp_ln15_fu_292_p2 <= "0" when (tmp_9_fu_278_p4 = ap_const_lv8_FF) else "1";
    icmp_ln6_fu_147_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten20_load = ap_const_lv10_280) else "0";
    icmp_ln9_fu_165_p2 <= "1" when (ap_sig_allocacmp_y_load = ap_const_lv8_A0) else "0";
    max_11_fu_316_p3 <= 
        pool_value_reg_501 when (and_ln15_fu_310_p2(0) = '1') else 
        ap_const_lv32_C1200000;
    or_ln13_fu_234_p2 <= (tmp_6_fu_197_p4 or ap_const_lv10_1);
    or_ln15_1_fu_392_p2 <= (icmp_ln15_3_fu_386_p2 or icmp_ln15_2_fu_380_p2);
    or_ln15_2_fu_410_p2 <= (icmp_ln15_5_fu_404_p2 or icmp_ln15_4_fu_398_p2);
    or_ln15_fu_304_p2 <= (icmp_ln15_fu_292_p2 or icmp_ln15_1_fu_298_p2);
    p_cast62_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_197_p4),11));
    p_shl3_fu_335_p3 <= (empty_reg_485_pp0_iter2_reg & ap_const_lv5_0);
    p_shl9_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_324_p3),10));
    p_shl9_fu_324_p3 <= (empty_reg_485_pp0_iter2_reg & ap_const_lv7_0);
    select_ln6_1_fu_185_p3 <= 
        add_ln6_1_fu_179_p2 when (icmp_ln9_fu_165_p2(0) = '1') else 
        ap_sig_allocacmp_z_load;
    select_ln6_fu_171_p3 <= 
        ap_const_lv8_0 when (icmp_ln9_fu_165_p2(0) = '1') else 
        ap_sig_allocacmp_y_load;
    tmp_10_fu_349_p4 <= bitcast_ln15_1_fu_346_p1(30 downto 23);
    tmp_11_fu_366_p4 <= bitcast_ln15_2_fu_363_p1(30 downto 23);
    tmp_16_fu_211_p3 <= (select_ln6_fu_171_p3 & ap_const_lv1_0);
    tmp_6_fu_197_p4 <= ((empty_fu_193_p1 & empty_fu_193_p1) & ap_const_lv6_0);
    tmp_9_fu_278_p4 <= bitcast_ln15_fu_275_p1(30 downto 23);
    trunc_ln15_1_fu_359_p1 <= bitcast_ln15_1_fu_346_p1(23 - 1 downto 0);
    trunc_ln15_2_fu_376_p1 <= bitcast_ln15_2_fu_363_p1(23 - 1 downto 0);
    trunc_ln15_fu_288_p1 <= bitcast_ln15_fu_275_p1(23 - 1 downto 0);
    zext_ln13_1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln13_fu_234_p2),11));
    zext_ln13_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_211_p3),11));
    zext_ln14_1_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_1_reg_496),64));
    zext_ln14_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_fu_223_p2),64));
    zext_ln17_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_1_fu_435_p2),10));
    zext_ln18_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_fu_444_p2),64));
    zext_ln9_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_335_p3),8));
end behav;
