// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_for_channel_pool_3_loop_for_weight_pool_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        OutConv7_address0,
        OutConv7_ce0,
        OutConv7_q0,
        OutConv7_address1,
        OutConv7_ce1,
        OutConv7_q1,
        OutPool3_address0,
        OutPool3_ce0,
        OutPool3_we0,
        OutPool3_d0,
        grp_fu_1469_p_din0,
        grp_fu_1469_p_din1,
        grp_fu_1469_p_opcode,
        grp_fu_1469_p_dout0,
        grp_fu_1469_p_ce,
        grp_fu_1473_p_din0,
        grp_fu_1473_p_din1,
        grp_fu_1473_p_opcode,
        grp_fu_1473_p_dout0,
        grp_fu_1473_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] OutConv7_address0;
output   OutConv7_ce0;
input  [31:0] OutConv7_q0;
output  [10:0] OutConv7_address1;
output   OutConv7_ce1;
input  [31:0] OutConv7_q1;
output  [9:0] OutPool3_address0;
output   OutPool3_ce0;
output   OutPool3_we0;
output  [31:0] OutPool3_d0;
output  [31:0] grp_fu_1469_p_din0;
output  [31:0] grp_fu_1469_p_din1;
output  [4:0] grp_fu_1469_p_opcode;
input  [0:0] grp_fu_1469_p_dout0;
output   grp_fu_1469_p_ce;
output  [31:0] grp_fu_1473_p_din0;
output  [31:0] grp_fu_1473_p_din1;
output  [4:0] grp_fu_1473_p_opcode;
input  [0:0] grp_fu_1473_p_dout0;
output   grp_fu_1473_p_ce;

reg ap_idle;
reg OutConv7_ce0;
reg OutConv7_ce1;
reg OutPool3_ce0;
reg OutPool3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln72_fu_151_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] select_ln72_fu_175_p3;
reg   [4:0] select_ln72_reg_500;
reg   [4:0] select_ln72_reg_500_pp0_iter1_reg;
reg   [4:0] select_ln72_reg_500_pp0_iter2_reg;
wire   [4:0] empty_fu_197_p1;
reg   [4:0] empty_reg_505;
reg   [4:0] empty_reg_505_pp0_iter1_reg;
reg   [4:0] empty_reg_505_pp0_iter2_reg;
wire   [10:0] add_ln79_1_fu_260_p2;
reg   [10:0] add_ln79_1_reg_516;
reg   [31:0] pool_value_reg_521;
wire   [31:0] max_1_fu_332_p3;
reg   [31:0] max_1_reg_533;
reg   [31:0] pool_value_1_reg_540;
wire   [63:0] zext_ln80_fu_249_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln80_1_fu_287_p1;
wire   [63:0] zext_ln84_fu_470_p1;
reg   [4:0] y_fu_72;
wire   [4:0] add_ln85_fu_266_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_y_load;
reg   [5:0] z_fu_76;
wire   [5:0] select_ln72_1_fu_189_p3;
reg   [5:0] ap_sig_allocacmp_z_load;
reg   [9:0] indvar_flatten242_fu_80;
wire   [9:0] add_ln72_fu_157_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten242_load;
wire   [0:0] icmp_ln75_fu_169_p2;
wire   [5:0] add_ln72_1_fu_183_p2;
wire   [9:0] p_shl_fu_201_p3;
wire   [7:0] p_shl1_fu_213_p3;
wire   [10:0] p_shl60_cast_fu_209_p1;
wire   [10:0] p_shl61_cast_fu_221_p1;
wire   [5:0] tmp_s_fu_231_p3;
wire   [10:0] zext_ln79_fu_239_p1;
wire   [10:0] empty_131_fu_225_p2;
wire   [10:0] add_ln79_fu_243_p2;
wire   [10:0] or_ln79_fu_254_p2;
wire   [31:0] bitcast_ln81_fu_291_p1;
wire   [7:0] tmp_1_fu_294_p4;
wire   [22:0] trunc_ln81_fu_304_p1;
wire   [0:0] icmp_ln81_1_fu_314_p2;
wire   [0:0] icmp_ln81_fu_308_p2;
wire   [0:0] or_ln81_fu_320_p2;
wire   [0:0] and_ln81_fu_326_p2;
wire   [8:0] p_shl2_fu_340_p3;
wire   [6:0] p_shl3_fu_351_p3;
wire   [31:0] bitcast_ln81_1_fu_365_p1;
wire   [31:0] bitcast_ln81_2_fu_382_p1;
wire   [7:0] tmp_3_fu_368_p4;
wire   [22:0] trunc_ln81_1_fu_378_p1;
wire   [0:0] icmp_ln81_3_fu_405_p2;
wire   [0:0] icmp_ln81_2_fu_399_p2;
wire   [7:0] tmp_4_fu_385_p4;
wire   [22:0] trunc_ln81_2_fu_395_p1;
wire   [0:0] icmp_ln81_5_fu_423_p2;
wire   [0:0] icmp_ln81_4_fu_417_p2;
wire   [0:0] or_ln81_1_fu_411_p2;
wire   [0:0] or_ln81_2_fu_429_p2;
wire   [0:0] and_ln81_1_fu_435_p2;
wire   [0:0] and_ln81_2_fu_441_p2;
wire   [7:0] zext_ln75_fu_358_p1;
wire   [7:0] zext_ln75_1_fu_362_p1;
wire   [7:0] add_ln83_fu_454_p2;
wire   [9:0] zext_ln83_fu_460_p1;
wire   [9:0] p_shl58_cast_fu_347_p1;
wire   [9:0] add_ln83_1_fu_464_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 y_fu_72 = 5'd0;
#0 z_fu_76 = 6'd0;
#0 indvar_flatten242_fu_80 = 10'd0;
#0 ap_done_reg = 1'b0;
end

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_151_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten242_fu_80 <= add_ln72_fu_157_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten242_fu_80 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_151_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            y_fu_72 <= add_ln85_fu_266_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_72 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln72_fu_151_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            z_fu_76 <= select_ln72_1_fu_189_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            z_fu_76 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln79_1_reg_516[10 : 1] <= add_ln79_1_fu_260_p2[10 : 1];
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_reg_505 <= empty_fu_197_p1;
        empty_reg_505_pp0_iter1_reg <= empty_reg_505;
        select_ln72_reg_500 <= select_ln72_fu_175_p3;
        select_ln72_reg_500_pp0_iter1_reg <= select_ln72_reg_500;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        empty_reg_505_pp0_iter2_reg <= empty_reg_505_pp0_iter1_reg;
        max_1_reg_533 <= max_1_fu_332_p3;
        select_ln72_reg_500_pp0_iter2_reg <= select_ln72_reg_500_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pool_value_1_reg_540 <= OutConv7_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pool_value_reg_521 <= OutConv7_q1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutConv7_ce0 = 1'b1;
    end else begin
        OutConv7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutConv7_ce1 = 1'b1;
    end else begin
        OutConv7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OutPool3_ce0 = 1'b1;
    end else begin
        OutPool3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OutPool3_we0 = 1'b1;
    end else begin
        OutPool3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_151_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten242_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten242_load = indvar_flatten242_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_y_load = 5'd0;
    end else begin
        ap_sig_allocacmp_y_load = y_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_z_load = 6'd0;
    end else begin
        ap_sig_allocacmp_z_load = z_fu_76;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv7_address0 = zext_ln80_1_fu_287_p1;

assign OutConv7_address1 = zext_ln80_fu_249_p1;

assign OutPool3_address0 = zext_ln84_fu_470_p1;

assign OutPool3_d0 = ((and_ln81_2_fu_441_p2[0:0] == 1'b1) ? pool_value_1_reg_540 : max_1_reg_533);

assign add_ln72_1_fu_183_p2 = (ap_sig_allocacmp_z_load + 6'd1);

assign add_ln72_fu_157_p2 = (ap_sig_allocacmp_indvar_flatten242_load + 10'd1);

assign add_ln79_1_fu_260_p2 = (zext_ln79_fu_239_p1 + or_ln79_fu_254_p2);

assign add_ln79_fu_243_p2 = (zext_ln79_fu_239_p1 + empty_131_fu_225_p2);

assign add_ln83_1_fu_464_p2 = (zext_ln83_fu_460_p1 + p_shl58_cast_fu_347_p1);

assign add_ln83_fu_454_p2 = (zext_ln75_fu_358_p1 + zext_ln75_1_fu_362_p1);

assign add_ln85_fu_266_p2 = (select_ln72_fu_175_p3 + 5'd1);

assign and_ln81_1_fu_435_p2 = (or_ln81_2_fu_429_p2 & or_ln81_1_fu_411_p2);

assign and_ln81_2_fu_441_p2 = (grp_fu_1473_p_dout0 & and_ln81_1_fu_435_p2);

assign and_ln81_fu_326_p2 = (or_ln81_fu_320_p2 & grp_fu_1469_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln81_1_fu_365_p1 = pool_value_1_reg_540;

assign bitcast_ln81_2_fu_382_p1 = max_1_reg_533;

assign bitcast_ln81_fu_291_p1 = pool_value_reg_521;

assign empty_131_fu_225_p2 = (p_shl60_cast_fu_209_p1 + p_shl61_cast_fu_221_p1);

assign empty_fu_197_p1 = select_ln72_1_fu_189_p3[4:0];

assign grp_fu_1469_p_ce = 1'b1;

assign grp_fu_1469_p_din0 = OutConv7_q1;

assign grp_fu_1469_p_din1 = 32'd3240099840;

assign grp_fu_1469_p_opcode = 5'd2;

assign grp_fu_1473_p_ce = 1'b1;

assign grp_fu_1473_p_din0 = OutConv7_q0;

assign grp_fu_1473_p_din1 = max_1_fu_332_p3;

assign grp_fu_1473_p_opcode = 5'd2;

assign icmp_ln72_fu_151_p2 = ((ap_sig_allocacmp_indvar_flatten242_load == 10'd640) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_169_p2 = ((ap_sig_allocacmp_y_load == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln81_1_fu_314_p2 = ((trunc_ln81_fu_304_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln81_2_fu_399_p2 = ((tmp_3_fu_368_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln81_3_fu_405_p2 = ((trunc_ln81_1_fu_378_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln81_4_fu_417_p2 = ((tmp_4_fu_385_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln81_5_fu_423_p2 = ((trunc_ln81_2_fu_395_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_308_p2 = ((tmp_1_fu_294_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_1_fu_332_p3 = ((and_ln81_fu_326_p2[0:0] == 1'b1) ? pool_value_reg_521 : 32'd3240099840);

assign or_ln79_fu_254_p2 = (empty_131_fu_225_p2 | 11'd1);

assign or_ln81_1_fu_411_p2 = (icmp_ln81_3_fu_405_p2 | icmp_ln81_2_fu_399_p2);

assign or_ln81_2_fu_429_p2 = (icmp_ln81_5_fu_423_p2 | icmp_ln81_4_fu_417_p2);

assign or_ln81_fu_320_p2 = (icmp_ln81_fu_308_p2 | icmp_ln81_1_fu_314_p2);

assign p_shl1_fu_213_p3 = {{empty_fu_197_p1}, {3'd0}};

assign p_shl2_fu_340_p3 = {{empty_reg_505_pp0_iter2_reg}, {4'd0}};

assign p_shl3_fu_351_p3 = {{empty_reg_505_pp0_iter2_reg}, {2'd0}};

assign p_shl58_cast_fu_347_p1 = p_shl2_fu_340_p3;

assign p_shl60_cast_fu_209_p1 = p_shl_fu_201_p3;

assign p_shl61_cast_fu_221_p1 = p_shl1_fu_213_p3;

assign p_shl_fu_201_p3 = {{empty_fu_197_p1}, {5'd0}};

assign select_ln72_1_fu_189_p3 = ((icmp_ln75_fu_169_p2[0:0] == 1'b1) ? add_ln72_1_fu_183_p2 : ap_sig_allocacmp_z_load);

assign select_ln72_fu_175_p3 = ((icmp_ln75_fu_169_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_y_load);

assign tmp_1_fu_294_p4 = {{bitcast_ln81_fu_291_p1[30:23]}};

assign tmp_3_fu_368_p4 = {{bitcast_ln81_1_fu_365_p1[30:23]}};

assign tmp_4_fu_385_p4 = {{bitcast_ln81_2_fu_382_p1[30:23]}};

assign tmp_s_fu_231_p3 = {{select_ln72_fu_175_p3}, {1'd0}};

assign trunc_ln81_1_fu_378_p1 = bitcast_ln81_1_fu_365_p1[22:0];

assign trunc_ln81_2_fu_395_p1 = bitcast_ln81_2_fu_382_p1[22:0];

assign trunc_ln81_fu_304_p1 = bitcast_ln81_fu_291_p1[22:0];

assign zext_ln75_1_fu_362_p1 = select_ln72_reg_500_pp0_iter2_reg;

assign zext_ln75_fu_358_p1 = p_shl3_fu_351_p3;

assign zext_ln79_fu_239_p1 = tmp_s_fu_231_p3;

assign zext_ln80_1_fu_287_p1 = add_ln79_1_reg_516;

assign zext_ln80_fu_249_p1 = add_ln79_fu_243_p2;

assign zext_ln83_fu_460_p1 = add_ln83_fu_454_p2;

assign zext_ln84_fu_470_p1 = add_ln83_1_fu_464_p2;

always @ (posedge ap_clk) begin
    add_ln79_1_reg_516[0] <= 1'b1;
end

endmodule //CNN_CNN_Pipeline_loop_for_channel_pool_3_loop_for_weight_pool_3
