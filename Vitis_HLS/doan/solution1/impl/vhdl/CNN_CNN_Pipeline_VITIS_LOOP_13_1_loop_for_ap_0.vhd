-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_VITIS_LOOP_13_1_loop_for_ap_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce0 : OUT STD_LOGIC;
    Weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce1 : OUT STD_LOGIC;
    Weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutPadConv0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv0_ce0 : OUT STD_LOGIC;
    OutPadConv0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutPadConv0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv0_ce1 : OUT STD_LOGIC;
    OutPadConv0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutConv0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv0_ce0 : OUT STD_LOGIC;
    OutConv0_we0 : OUT STD_LOGIC;
    OutConv0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1453_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_ce : OUT STD_LOGIC;
    grp_fu_1457_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1457_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1457_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1457_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1457_p_ce : OUT STD_LOGIC;
    grp_fu_1461_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1461_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1461_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1461_p_ce : OUT STD_LOGIC;
    grp_fu_1465_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1465_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1465_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1465_p_ce : OUT STD_LOGIC;
    grp_fu_1469_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1469_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1469_p_ce : OUT STD_LOGIC );
end;


architecture behav of CNN_CNN_Pipeline_VITIS_LOOP_13_1_loop_for_ap_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln13_reg_600 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln13_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_600_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_600_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_600_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_600_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_600_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_600_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_600_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_600_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_fu_289_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_reg_604 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_reg_604_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_reg_604_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_reg_604_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_reg_604_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_reg_604_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_reg_604_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_reg_604_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_reg_604_pp0_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_reg_604_pp0_iter9_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_1_fu_303_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_1_reg_612 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_1_reg_612_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_1_reg_612_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_1_reg_612_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_1_reg_612_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_1_reg_612_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_1_reg_612_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_1_reg_612_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_315_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_617 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_617_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_617_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_617_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_617_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_617_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_617_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_617_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_617_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_617_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_fu_338_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast_reg_623 : STD_LOGIC_VECTOR (4 downto 0);
    signal OutPadConv0_load_reg_650 : STD_LOGIC_VECTOR (31 downto 0);
    signal OutPadConv0_load_1_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln21_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln21_1_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal OutPadConv0_load_2_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal OutPadConv0_load_3_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln21_2_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln21_3_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal OutPadConv0_load_4_reg_720 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_reg_725 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_1_reg_730 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_1_reg_730_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln21_4_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_2_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_2_reg_740_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_2_reg_740_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_3_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_3_reg_745_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_3_reg_745_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_3_reg_745_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_4_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_4_reg_750_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_4_reg_750_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_4_reg_750_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i_4_reg_750_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_1_reg_760 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_2_reg_765 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_3_reg_770 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_4_reg_780 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_155_fu_483_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add28_i_reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal p_cast136_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln15_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_1_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_2_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_3_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln21_4_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_5_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_6_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_7_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln21_8_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arrayidx3_sum_cast_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_86 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln21_1_fu_358_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_load : STD_LOGIC_VECTOR (8 downto 0);
    signal n_1_fu_90 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ap_sig_allocacmp_n_1_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_94 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln13_fu_271_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_217_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_222_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_230_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln15_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_2_fu_297_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl2_fu_319_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln13_1_fu_311_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_154_fu_327_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln21_fu_347_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_2_fu_384_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_3_fu_394_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln21_4_fu_404_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_5_fu_414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln21_6_fu_434_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_7_fu_444_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln13_fu_469_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal arrayidx3_sum_fu_472_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_488_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_499_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln23_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_513_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_fu_523_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln23_1_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln21_fu_506_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln23_1_fu_551_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln23_fu_556_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_495_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_fu_560_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln23_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter9_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to8 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_1to10 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_fu_265_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_94 <= add_ln13_fu_271_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_94 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    n_1_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_fu_265_p2 = ap_const_lv1_0))) then 
                    n_1_fu_90 <= select_ln13_1_fu_303_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_1_fu_90 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_fu_265_p2 = ap_const_lv1_0))) then 
                    y_fu_86 <= add_ln21_1_fu_358_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_86 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                OutPadConv0_load_1_reg_655 <= OutPadConv0_q0;
                OutPadConv0_load_reg_650 <= OutPadConv0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                OutPadConv0_load_2_reg_690 <= OutPadConv0_q1;
                OutPadConv0_load_3_reg_695 <= OutPadConv0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                OutPadConv0_load_4_reg_720 <= OutPadConv0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add28_i_reg_790 <= grp_fu_1457_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_reg_617 <= empty_fu_315_p1;
                empty_reg_617_pp0_iter1_reg <= empty_reg_617;
                empty_reg_617_pp0_iter2_reg <= empty_reg_617_pp0_iter1_reg;
                empty_reg_617_pp0_iter3_reg <= empty_reg_617_pp0_iter2_reg;
                empty_reg_617_pp0_iter4_reg <= empty_reg_617_pp0_iter3_reg;
                empty_reg_617_pp0_iter5_reg <= empty_reg_617_pp0_iter4_reg;
                empty_reg_617_pp0_iter6_reg <= empty_reg_617_pp0_iter5_reg;
                empty_reg_617_pp0_iter7_reg <= empty_reg_617_pp0_iter6_reg;
                empty_reg_617_pp0_iter8_reg <= empty_reg_617_pp0_iter7_reg;
                empty_reg_617_pp0_iter9_reg <= empty_reg_617_pp0_iter8_reg;
                icmp_ln13_reg_600 <= icmp_ln13_fu_265_p2;
                icmp_ln13_reg_600_pp0_iter1_reg <= icmp_ln13_reg_600;
                icmp_ln13_reg_600_pp0_iter2_reg <= icmp_ln13_reg_600_pp0_iter1_reg;
                icmp_ln13_reg_600_pp0_iter3_reg <= icmp_ln13_reg_600_pp0_iter2_reg;
                icmp_ln13_reg_600_pp0_iter4_reg <= icmp_ln13_reg_600_pp0_iter3_reg;
                icmp_ln13_reg_600_pp0_iter5_reg <= icmp_ln13_reg_600_pp0_iter4_reg;
                icmp_ln13_reg_600_pp0_iter6_reg <= icmp_ln13_reg_600_pp0_iter5_reg;
                icmp_ln13_reg_600_pp0_iter7_reg <= icmp_ln13_reg_600_pp0_iter6_reg;
                icmp_ln13_reg_600_pp0_iter8_reg <= icmp_ln13_reg_600_pp0_iter7_reg;
                mul21_i_4_reg_750_pp0_iter3_reg <= mul21_i_4_reg_750;
                mul21_i_4_reg_750_pp0_iter4_reg <= mul21_i_4_reg_750_pp0_iter3_reg;
                mul21_i_4_reg_750_pp0_iter5_reg <= mul21_i_4_reg_750_pp0_iter4_reg;
                mul21_i_4_reg_750_pp0_iter6_reg <= mul21_i_4_reg_750_pp0_iter5_reg;
                    p_cast_reg_623(3 downto 0) <= p_cast_fu_338_p1(3 downto 0);
                select_ln13_1_reg_612 <= select_ln13_1_fu_303_p3;
                select_ln13_1_reg_612_pp0_iter1_reg <= select_ln13_1_reg_612;
                select_ln13_1_reg_612_pp0_iter2_reg <= select_ln13_1_reg_612_pp0_iter1_reg;
                select_ln13_1_reg_612_pp0_iter3_reg <= select_ln13_1_reg_612_pp0_iter2_reg;
                select_ln13_1_reg_612_pp0_iter4_reg <= select_ln13_1_reg_612_pp0_iter3_reg;
                select_ln13_1_reg_612_pp0_iter5_reg <= select_ln13_1_reg_612_pp0_iter4_reg;
                select_ln13_1_reg_612_pp0_iter6_reg <= select_ln13_1_reg_612_pp0_iter5_reg;
                select_ln13_1_reg_612_pp0_iter7_reg <= select_ln13_1_reg_612_pp0_iter6_reg;
                select_ln13_reg_604 <= select_ln13_fu_289_p3;
                select_ln13_reg_604_pp0_iter1_reg <= select_ln13_reg_604;
                select_ln13_reg_604_pp0_iter2_reg <= select_ln13_reg_604_pp0_iter1_reg;
                select_ln13_reg_604_pp0_iter3_reg <= select_ln13_reg_604_pp0_iter2_reg;
                select_ln13_reg_604_pp0_iter4_reg <= select_ln13_reg_604_pp0_iter3_reg;
                select_ln13_reg_604_pp0_iter5_reg <= select_ln13_reg_604_pp0_iter4_reg;
                select_ln13_reg_604_pp0_iter6_reg <= select_ln13_reg_604_pp0_iter5_reg;
                select_ln13_reg_604_pp0_iter7_reg <= select_ln13_reg_604_pp0_iter6_reg;
                select_ln13_reg_604_pp0_iter8_reg <= select_ln13_reg_604_pp0_iter7_reg;
                select_ln13_reg_604_pp0_iter9_reg <= select_ln13_reg_604_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul21_i_1_reg_730 <= grp_fu_1465_p_dout0;
                mul21_i_reg_725 <= grp_fu_1461_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul21_i_1_reg_730_pp0_iter2_reg <= mul21_i_1_reg_730;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul21_i_2_reg_740 <= grp_fu_1461_p_dout0;
                mul21_i_3_reg_745 <= grp_fu_1465_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul21_i_2_reg_740_pp0_iter2_reg <= mul21_i_2_reg_740;
                mul21_i_2_reg_740_pp0_iter3_reg <= mul21_i_2_reg_740_pp0_iter2_reg;
                mul21_i_3_reg_745_pp0_iter2_reg <= mul21_i_3_reg_745;
                mul21_i_3_reg_745_pp0_iter3_reg <= mul21_i_3_reg_745_pp0_iter2_reg;
                mul21_i_3_reg_745_pp0_iter4_reg <= mul21_i_3_reg_745_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul21_i_4_reg_750 <= grp_fu_1461_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_239 <= Weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_243 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                s_1_reg_760 <= grp_fu_1453_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                s_2_reg_765 <= grp_fu_1453_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                s_3_reg_770 <= grp_fu_1457_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                s_4_reg_780 <= grp_fu_1457_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                s_reg_755 <= grp_fu_1453_p_dout0;
            end if;
        end if;
    end process;
    p_cast_reg_623(4) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter9_stage0, ap_idle_pp0_0to8, ap_idle_pp0_1to10, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to8 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter9_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to10 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    OutConv0_address0 <= zext_ln23_1_fu_566_p1(11 - 1 downto 0);

    OutConv0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutConv0_ce0 <= ap_const_logic_1;
        else 
            OutConv0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OutConv0_d0 <= 
        ap_const_lv32_0 when (and_ln23_fu_545_p2(0) = '1') else 
        add28_i_reg_790;

    OutConv0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutConv0_we0 <= ap_const_logic_1;
        else 
            OutConv0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OutPadConv0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln21_2_fu_364_p1, ap_block_pp0_stage1, zext_ln21_6_fu_419_p1, ap_block_pp0_stage2, zext_ln21_8_fu_449_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                OutPadConv0_address0 <= zext_ln21_8_fu_449_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OutPadConv0_address0 <= zext_ln21_6_fu_419_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                OutPadConv0_address0 <= zext_ln21_2_fu_364_p1(9 - 1 downto 0);
            else 
                OutPadConv0_address0 <= "XXXXXXXXX";
            end if;
        else 
            OutPadConv0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    OutPadConv0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln15_fu_342_p1, ap_block_pp0_stage1, zext_ln21_4_fu_399_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OutPadConv0_address1 <= zext_ln21_4_fu_399_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                OutPadConv0_address1 <= zext_ln15_fu_342_p1(9 - 1 downto 0);
            else 
                OutPadConv0_address1 <= "XXXXXXXXX";
            end if;
        else 
            OutPadConv0_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    OutPadConv0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OutPadConv0_ce0 <= ap_const_logic_1;
        else 
            OutPadConv0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OutPadConv0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OutPadConv0_ce1 <= ap_const_logic_1;
        else 
            OutPadConv0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Weights_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln21_1_fu_353_p1, ap_block_pp0_stage1, zext_ln21_5_fu_409_p1, ap_block_pp0_stage2, arrayidx3_sum_cast_fu_478_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            Weights_address0 <= arrayidx3_sum_cast_fu_478_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Weights_address0 <= zext_ln21_5_fu_409_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Weights_address0 <= zext_ln21_1_fu_353_p1(14 - 1 downto 0);
        else 
            Weights_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Weights_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, p_cast136_fu_333_p1, ap_block_pp0_stage0, zext_ln21_3_fu_389_p1, ap_block_pp0_stage1, zext_ln21_7_fu_439_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                Weights_address1 <= zext_ln21_7_fu_439_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                Weights_address1 <= zext_ln21_3_fu_389_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Weights_address1 <= p_cast136_fu_333_p1(14 - 1 downto 0);
            else 
                Weights_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            Weights_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            Weights_ce0 <= ap_const_logic_1;
        else 
            Weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Weights_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            Weights_ce1 <= ap_const_logic_1;
        else 
            Weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln13_2_fu_297_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_1_load) + unsigned(ap_const_lv3_1));
    add_ln13_fu_271_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv11_1));
    add_ln21_1_fu_358_p2 <= std_logic_vector(unsigned(select_ln13_fu_289_p3) + unsigned(ap_const_lv9_1));
    add_ln21_2_fu_384_p2 <= std_logic_vector(unsigned(p_cast_reg_623) + unsigned(ap_const_lv5_2));
    add_ln21_3_fu_394_p2 <= std_logic_vector(unsigned(select_ln13_reg_604) + unsigned(ap_const_lv9_2));
    add_ln21_4_fu_404_p2 <= std_logic_vector(unsigned(p_cast_reg_623) + unsigned(ap_const_lv5_3));
    add_ln21_5_fu_414_p2 <= std_logic_vector(unsigned(select_ln13_reg_604) + unsigned(ap_const_lv9_3));
    add_ln21_6_fu_434_p2 <= std_logic_vector(unsigned(p_cast_reg_623) + unsigned(ap_const_lv5_4));
    add_ln21_7_fu_444_p2 <= std_logic_vector(unsigned(select_ln13_reg_604) + unsigned(ap_const_lv9_4));
    add_ln21_fu_347_p2 <= std_logic_vector(unsigned(p_cast_fu_338_p1) + unsigned(ap_const_lv5_1));
    add_ln23_1_fu_551_p2 <= std_logic_vector(unsigned(zext_ln21_fu_506_p1) + unsigned(select_ln13_reg_604_pp0_iter9_reg));
    add_ln23_fu_560_p2 <= std_logic_vector(unsigned(zext_ln23_fu_556_p1) + unsigned(p_shl_cast_fu_495_p1));
    and_ln23_fu_545_p2 <= (or_ln23_fu_539_p2 and grp_fu_1469_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln13_reg_600)
    begin
        if (((icmp_ln13_reg_600 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter9_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, icmp_ln13_reg_600_pp0_iter8_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_600_pp0_iter8_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter9_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter9_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to8 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to10_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to10 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to10 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_n_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, n_1_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n_1_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_n_1_load <= n_1_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_y_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_86, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_y_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_y_load <= y_fu_86;
        end if; 
    end process;

    arrayidx3_sum_cast_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx3_sum_fu_472_p2),64));
    arrayidx3_sum_fu_472_p2 <= std_logic_vector(unsigned(zext_ln13_fu_469_p1) + unsigned(ap_const_lv5_14));
    bitcast_ln21_1_fu_429_p1 <= reg_243;
    bitcast_ln21_2_fu_454_p1 <= reg_239;
    bitcast_ln21_3_fu_459_p1 <= reg_243;
    bitcast_ln21_4_fu_464_p1 <= reg_239;
    bitcast_ln21_fu_424_p1 <= reg_239;
    bitcast_ln23_fu_510_p1 <= add28_i_reg_790;
    empty_154_fu_327_p2 <= std_logic_vector(unsigned(p_shl2_fu_319_p3) + unsigned(zext_ln13_1_fu_311_p1));
    empty_155_fu_483_p1 <= reg_243;
    empty_fu_315_p1 <= select_ln13_1_fu_303_p3(2 - 1 downto 0);
    grp_fu_1453_p_ce <= ap_const_logic_1;
    grp_fu_1453_p_din0 <= grp_fu_217_p0;
    grp_fu_1453_p_din1 <= grp_fu_217_p1;
    grp_fu_1453_p_opcode <= ap_const_lv2_0;
    grp_fu_1457_p_ce <= ap_const_logic_1;
    grp_fu_1457_p_din0 <= grp_fu_222_p0;
    grp_fu_1457_p_din1 <= grp_fu_222_p1;
    grp_fu_1457_p_opcode <= ap_const_lv2_0;
    grp_fu_1461_p_ce <= ap_const_logic_1;
    grp_fu_1461_p_din0 <= grp_fu_226_p0;
    grp_fu_1461_p_din1 <= grp_fu_226_p1;
    grp_fu_1465_p_ce <= ap_const_logic_1;
    grp_fu_1465_p_din0 <= grp_fu_230_p0;
    grp_fu_1465_p_din1 <= grp_fu_230_p1;
    grp_fu_1469_p_ce <= ap_const_logic_1;
    grp_fu_1469_p_din0 <= add28_i_reg_790;
    grp_fu_1469_p_din1 <= ap_const_lv32_0;
    grp_fu_1469_p_opcode <= ap_const_lv5_4;

    grp_fu_217_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, mul21_i_reg_725, s_reg_755, s_1_reg_760, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_217_p0 <= s_1_reg_760;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_217_p0 <= s_reg_755;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_217_p0 <= mul21_i_reg_725;
        else 
            grp_fu_217_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_217_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, mul21_i_1_reg_730_pp0_iter2_reg, mul21_i_2_reg_740_pp0_iter3_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_217_p1 <= mul21_i_2_reg_740_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_217_p1 <= mul21_i_1_reg_730_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_217_p1 <= ap_const_lv32_0;
        else 
            grp_fu_217_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_222_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, s_2_reg_765, s_3_reg_770, s_4_reg_780, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_222_p0 <= s_4_reg_780;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_222_p0 <= s_3_reg_770;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_222_p0 <= s_2_reg_765;
        else 
            grp_fu_222_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_222_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, mul21_i_3_reg_745_pp0_iter4_reg, mul21_i_4_reg_750_pp0_iter6_reg, empty_155_fu_483_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_222_p1 <= empty_155_fu_483_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_222_p1 <= mul21_i_4_reg_750_pp0_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_222_p1 <= mul21_i_3_reg_745_pp0_iter4_reg;
        else 
            grp_fu_222_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_226_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, bitcast_ln21_fu_424_p1, bitcast_ln21_2_fu_454_p1, bitcast_ln21_4_fu_464_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_226_p0 <= bitcast_ln21_4_fu_464_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_226_p0 <= bitcast_ln21_2_fu_454_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_226_p0 <= bitcast_ln21_fu_424_p1;
        else 
            grp_fu_226_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_226_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, OutPadConv0_load_reg_650, OutPadConv0_load_2_reg_690, OutPadConv0_load_4_reg_720, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_226_p1 <= OutPadConv0_load_4_reg_720;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_226_p1 <= OutPadConv0_load_2_reg_690;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_226_p1 <= OutPadConv0_load_reg_650;
        else 
            grp_fu_226_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_230_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, bitcast_ln21_1_fu_429_p1, bitcast_ln21_3_fu_459_p1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_230_p0 <= bitcast_ln21_3_fu_459_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_230_p0 <= bitcast_ln21_1_fu_429_p1;
        else 
            grp_fu_230_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_230_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, OutPadConv0_load_1_reg_655, OutPadConv0_load_3_reg_695, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_230_p1 <= OutPadConv0_load_3_reg_695;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_230_p1 <= OutPadConv0_load_1_reg_655;
        else 
            grp_fu_230_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln13_fu_265_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv11_500) else "0";
    icmp_ln15_fu_283_p2 <= "1" when (ap_sig_allocacmp_y_load = ap_const_lv9_140) else "0";
    icmp_ln23_1_fu_533_p2 <= "1" when (trunc_ln23_fu_523_p1 = ap_const_lv23_0) else "0";
    icmp_ln23_fu_527_p2 <= "0" when (tmp_1_fu_513_p4 = ap_const_lv8_FF) else "1";
    or_ln23_fu_539_p2 <= (icmp_ln23_fu_527_p2 or icmp_ln23_1_fu_533_p2);
    p_cast136_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_154_fu_327_p2),64));
    p_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_154_fu_327_p2),5));
    p_shl1_fu_499_p3 <= (empty_reg_617_pp0_iter9_reg & ap_const_lv6_0);
    p_shl2_fu_319_p3 <= (empty_fu_315_p1 & ap_const_lv2_0);
    p_shl_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_488_p3),11));
    p_shl_fu_488_p3 <= (empty_reg_617_pp0_iter9_reg & ap_const_lv8_0);
    select_ln13_1_fu_303_p3 <= 
        add_ln13_2_fu_297_p2 when (icmp_ln15_fu_283_p2(0) = '1') else 
        ap_sig_allocacmp_n_1_load;
    select_ln13_fu_289_p3 <= 
        ap_const_lv9_0 when (icmp_ln15_fu_283_p2(0) = '1') else 
        ap_sig_allocacmp_y_load;
    tmp_1_fu_513_p4 <= bitcast_ln23_fu_510_p1(30 downto 23);
    trunc_ln23_fu_523_p1 <= bitcast_ln23_fu_510_p1(23 - 1 downto 0);
    zext_ln13_1_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_1_fu_303_p3),4));
    zext_ln13_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_1_reg_612_pp0_iter7_reg),5));
    zext_ln15_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_fu_289_p3),64));
    zext_ln21_1_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_fu_347_p2),64));
    zext_ln21_2_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_1_fu_358_p2),64));
    zext_ln21_3_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_2_fu_384_p2),64));
    zext_ln21_4_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_3_fu_394_p2),64));
    zext_ln21_5_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_4_fu_404_p2),64));
    zext_ln21_6_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_5_fu_414_p2),64));
    zext_ln21_7_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_6_fu_434_p2),64));
    zext_ln21_8_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_7_fu_444_p2),64));
    zext_ln21_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_499_p3),9));
    zext_ln23_1_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_560_p2),64));
    zext_ln23_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_1_fu_551_p2),11));
end behav;
