-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_detect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    maxindex : IN STD_LOGIC_VECTOR (31 downto 0);
    out_Dense_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_Dense_ce0 : OUT STD_LOGIC;
    out_Dense_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv6_i_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv6_i_out_ap_vld : OUT STD_LOGIC;
    grp_fu_1469_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1469_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1469_p_ce : OUT STD_LOGIC );
end;


architecture behav of CNN_CNN_Pipeline_loop_detect is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln26_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_275 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln26_reg_280 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_280_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal maxindex_1_load_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxindex_2_reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln26_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal maxindex_1_fu_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal maxindex_3_fu_233_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_maxindex_1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal conv6_i_fu_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal select_ln27_fu_225_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_54 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln26_fu_121_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_84_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_fu_143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln27_1_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_146_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_fu_156_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_1_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_163_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln27_1_fu_173_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln27_3_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_2_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_1_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln27_1_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_84_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_sitofp_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sitofp_32ns_32_4_no_dsp_1_U192 : component CNN_sitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_84_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_84_p1);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    conv6_i_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    conv6_i_fu_50 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    conv6_i_fu_50 <= select_ln27_fu_225_p3;
                end if;
            end if; 
        end if;
    end process;

    i_2_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln26_fu_110_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_2_fu_54 <= add_ln26_fu_121_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_2_fu_54 <= ap_const_lv3_1;
                end if;
            end if; 
        end if;
    end process;

    maxindex_1_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    maxindex_1_fu_46 <= maxindex;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    maxindex_1_fu_46 <= maxindex_3_fu_233_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_reg_275 <= ap_sig_allocacmp_i;
                icmp_ln26_reg_280 <= icmp_ln26_fu_110_p2;
                icmp_ln26_reg_280_pp0_iter1_reg <= icmp_ln26_reg_280;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                maxindex_1_load_reg_294 <= ap_sig_allocacmp_maxindex_1_load;
                maxindex_2_reg_301 <= out_Dense_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln26_fu_121_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv3_1));
    and_ln27_1_fu_219_p2 <= (or_ln27_1_fu_207_p2 and and_ln27_fu_213_p2);
    and_ln27_fu_213_p2 <= (or_ln27_fu_189_p2 and grp_fu_1469_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln26_fu_110_p2)
    begin
        if (((icmp_ln26_fu_110_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_2_fu_54)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv3_1;
        else 
            ap_sig_allocacmp_i <= i_2_fu_54;
        end if; 
    end process;


    ap_sig_allocacmp_maxindex_1_load_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, maxindex_1_fu_46, maxindex_3_fu_233_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_maxindex_1_load <= maxindex_3_fu_233_p3;
        else 
            ap_sig_allocacmp_maxindex_1_load <= maxindex_1_fu_46;
        end if; 
    end process;

    bitcast_ln27_1_fu_160_p1 <= maxindex_1_load_reg_294;
    bitcast_ln27_fu_143_p1 <= maxindex_2_reg_301;
    conv6_i_out <= conv6_i_fu_50;

    conv6_i_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln26_reg_280_pp0_iter1_reg)
    begin
        if (((icmp_ln26_reg_280_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv6_i_out_ap_vld <= ap_const_logic_1;
        else 
            conv6_i_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1469_p_ce <= ap_const_logic_1;
    grp_fu_1469_p_din0 <= out_Dense_q0;
    grp_fu_1469_p_din1 <= ap_sig_allocacmp_maxindex_1_load;
    grp_fu_1469_p_opcode <= ap_const_lv5_2;
    grp_fu_84_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),32));
    icmp_ln26_fu_110_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv3_5) else "0";
    icmp_ln27_1_fu_183_p2 <= "1" when (trunc_ln27_fu_156_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_2_fu_195_p2 <= "0" when (tmp_18_fu_163_p4 = ap_const_lv8_FF) else "1";
    icmp_ln27_3_fu_201_p2 <= "1" when (trunc_ln27_1_fu_173_p1 = ap_const_lv23_0) else "0";
    icmp_ln27_fu_177_p2 <= "0" when (tmp_s_fu_146_p4 = ap_const_lv8_FF) else "1";
    maxindex_3_fu_233_p3 <= 
        maxindex_2_reg_301 when (and_ln27_1_fu_219_p2(0) = '1') else 
        maxindex_1_load_reg_294;
    or_ln27_1_fu_207_p2 <= (icmp_ln27_3_fu_201_p2 or icmp_ln27_2_fu_195_p2);
    or_ln27_fu_189_p2 <= (icmp_ln27_fu_177_p2 or icmp_ln27_1_fu_183_p2);
    out_Dense_address0 <= zext_ln26_fu_132_p1(3 - 1 downto 0);

    out_Dense_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_Dense_ce0 <= ap_const_logic_1;
        else 
            out_Dense_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln27_fu_225_p3 <= 
        grp_fu_84_p1 when (and_ln27_1_fu_219_p2(0) = '1') else 
        conv6_i_fu_50;
    tmp_18_fu_163_p4 <= bitcast_ln27_1_fu_160_p1(30 downto 23);
    tmp_s_fu_146_p4 <= bitcast_ln27_fu_143_p1(30 downto 23);
    trunc_ln27_1_fu_173_p1 <= bitcast_ln27_1_fu_160_p1(23 - 1 downto 0);
    trunc_ln27_fu_156_p1 <= bitcast_ln27_fu_143_p1(23 - 1 downto 0);
    zext_ln26_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_275),64));
end behav;
