-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_VITIS_LOOP_143_1_loop_for_ap_5_loop_for_fc_5_loop_for_fa_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce0 : OUT STD_LOGIC;
    Weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce1 : OUT STD_LOGIC;
    Weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutPadConv5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutPadConv5_ce0 : OUT STD_LOGIC;
    OutPadConv5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutConv5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv5_ce0 : OUT STD_LOGIC;
    OutConv5_we0 : OUT STD_LOGIC;
    OutConv5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1453_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1453_p_ce : OUT STD_LOGIC;
    grp_fu_1461_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1461_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1461_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1461_p_ce : OUT STD_LOGIC;
    grp_fu_1469_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1469_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1469_p_ce : OUT STD_LOGIC );
end;


architecture behav of CNN_CNN_Pipeline_VITIS_LOOP_143_1_loop_for_ap_5_loop_for_fc_5_loop_for_fa_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_19000 : STD_LOGIC_VECTOR (16 downto 0) := "11001000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv14_1900 : STD_LOGIC_VECTOR (13 downto 0) := "01100100000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_4EC : STD_LOGIC_VECTOR (10 downto 0) := "10011101100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv12_9EC : STD_LOGIC_VECTOR (11 downto 0) := "100111101100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv11_54 : STD_LOGIC_VECTOR (10 downto 0) := "00001010100";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln143_reg_765 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten83_load_reg_755 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal indvar_flatten98_load_reg_760 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln143_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln145_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln145_reg_769 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_1_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_1_reg_775 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln143_1_fu_298_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln143_1_reg_780 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln143_1_reg_780_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln145_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln145_reg_785 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln145_reg_785_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln146_fu_362_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln146_reg_791 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_151_fu_406_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_151_reg_796 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln148_fu_412_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln150_1_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_811 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_811_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_811_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_811_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_811_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_1_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_1_reg_815 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_1_reg_815_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_1_reg_815_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_1_reg_815_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_1_reg_815_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Weights_load_90_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln153_fu_551_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln153_reg_829 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln153_reg_829_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln153_reg_829_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln153_reg_829_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal OutPadConv5_load_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln151_fu_599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul21_i5_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln145_1_fu_606_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Weights_load_reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_152_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add28_i5_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln151_2_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln151_4_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal arrayidx37_sum_cast_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal s_126_fu_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_100 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln150_fu_473_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_fu_104 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln148_fu_370_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten83_fu_108 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln148_1_fu_570_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_fu_112 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal select_ln145_2_fu_527_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten98_fu_116 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal select_ln145_3_fu_582_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_fu_120 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal indvar_flatten122_fu_124 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln143_fu_247_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_179_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal icmp_ln148_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln143_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln143_1_fu_292_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln145_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln143_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln145_1_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln145_fu_312_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln145_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln146_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln146_1_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln148_fu_344_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_fu_378_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_382_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl22_fu_394_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl37_cast_fu_390_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl38_cast_fu_402_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_153_fu_416_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl23_fu_420_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln151_fu_436_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln150_1_fu_432_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln151_2_fu_446_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl39_cast_fu_428_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln151_4_fu_452_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln151_1_fu_458_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln151_fu_442_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln151_1_fu_462_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln143_fu_514_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln145_fu_521_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln150_fu_538_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln151_5_fu_541_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln145_fu_534_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_690_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln148_1_fu_565_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln145_1_fu_577_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln143_fu_614_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal arrayidx37_sum_fu_617_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln153_fu_637_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_640_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln153_fu_650_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln153_1_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln153_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln153_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_690_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_690_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_690_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal grp_fu_690_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_mac_muladd_5ns_7ns_7ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_5ns_7ns_7ns_11_4_1_U74 : component CNN_mac_muladd_5ns_7ns_7ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_690_p0,
        din1 => grp_fu_690_p1,
        din2 => grp_fu_690_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_690_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten122_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten122_fu_124 <= ap_const_lv17_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln143_fu_241_p2 = ap_const_lv1_0))) then 
                indvar_flatten122_fu_124 <= add_ln143_fu_247_p2;
            end if; 
        end if;
    end process;

    indvar_flatten83_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten83_fu_108 <= ap_const_lv8_0;
                elsif (((icmp_ln143_reg_765 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten83_fu_108 <= select_ln148_1_fu_570_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten98_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten98_fu_116 <= ap_const_lv14_0;
                elsif (((icmp_ln143_reg_765 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten98_fu_116 <= select_ln145_3_fu_582_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_100 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln143_fu_241_p2 = ap_const_lv1_0))) then 
                j_fu_100 <= add_ln150_fu_473_p2;
            end if; 
        end if;
    end process;

    k_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_fu_104 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln143_fu_241_p2 = ap_const_lv1_0))) then 
                k_fu_104 <= select_ln148_fu_370_p3;
            end if; 
        end if;
    end process;

    n_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                n_fu_120 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln143_fu_241_p2 = ap_const_lv1_0))) then 
                n_fu_120 <= select_ln143_1_fu_298_p3;
            end if; 
        end if;
    end process;

    s_126_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    s_126_fu_96 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    s_126_fu_96 <= grp_fu_1453_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                y_fu_112 <= ap_const_lv7_0;
            elsif (((icmp_ln143_reg_765 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                y_fu_112 <= select_ln145_2_fu_527_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                OutPadConv5_load_reg_839 <= OutPadConv5_q0;
                and_ln143_1_reg_775 <= and_ln143_1_fu_286_p2;
                    empty_151_reg_796(10 downto 4) <= empty_151_fu_406_p2(10 downto 4);
                icmp_ln143_reg_765 <= icmp_ln143_fu_241_p2;
                icmp_ln145_reg_769 <= icmp_ln145_fu_262_p2;
                icmp_ln148_1_reg_815 <= icmp_ln148_1_fu_485_p2;
                icmp_ln148_1_reg_815_pp0_iter1_reg <= icmp_ln148_1_reg_815;
                icmp_ln148_1_reg_815_pp0_iter2_reg <= icmp_ln148_1_reg_815_pp0_iter1_reg;
                icmp_ln148_1_reg_815_pp0_iter3_reg <= icmp_ln148_1_reg_815_pp0_iter2_reg;
                icmp_ln148_1_reg_815_pp0_iter4_reg <= icmp_ln148_1_reg_815_pp0_iter3_reg;
                icmp_ln150_1_reg_811 <= icmp_ln150_1_fu_479_p2;
                icmp_ln150_1_reg_811_pp0_iter1_reg <= icmp_ln150_1_reg_811;
                icmp_ln150_1_reg_811_pp0_iter2_reg <= icmp_ln150_1_reg_811_pp0_iter1_reg;
                icmp_ln150_1_reg_811_pp0_iter3_reg <= icmp_ln150_1_reg_811_pp0_iter2_reg;
                icmp_ln150_1_reg_811_pp0_iter4_reg <= icmp_ln150_1_reg_811_pp0_iter3_reg;
                indvar_flatten83_load_reg_755 <= indvar_flatten83_fu_108;
                indvar_flatten98_load_reg_760 <= indvar_flatten98_fu_116;
                or_ln145_reg_785 <= or_ln145_fu_306_p2;
                or_ln145_reg_785_pp0_iter1_reg <= or_ln145_reg_785;
                select_ln143_1_reg_780 <= select_ln143_1_fu_298_p3;
                select_ln143_1_reg_780_pp0_iter1_reg <= select_ln143_1_reg_780;
                select_ln146_reg_791 <= select_ln146_fu_362_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                Weights_load_90_reg_819 <= Weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                Weights_load_reg_864 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add28_i5_reg_879 <= grp_fu_1453_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln153_reg_829 <= add_ln153_fu_551_p2;
                add_ln153_reg_829_pp0_iter1_reg <= add_ln153_reg_829;
                add_ln153_reg_829_pp0_iter2_reg <= add_ln153_reg_829_pp0_iter1_reg;
                add_ln153_reg_829_pp0_iter3_reg <= add_ln153_reg_829_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul21_i5_reg_849 <= grp_fu_1461_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                s_reg_869 <= grp_fu_1453_p_dout0;
            end if;
        end if;
    end process;
    empty_151_reg_796(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to4, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    OutConv5_address0 <= zext_ln153_fu_678_p1(11 - 1 downto 0);

    OutConv5_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            OutConv5_ce0 <= ap_const_logic_1;
        else 
            OutConv5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OutConv5_d0 <= 
        ap_const_lv32_0 when (and_ln153_fu_672_p2(0) = '1') else 
        add28_i5_reg_879;

    OutConv5_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage3, icmp_ln150_1_reg_811_pp0_iter4_reg, icmp_ln148_1_reg_815_pp0_iter4_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln148_1_reg_815_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln150_1_reg_811_pp0_iter4_reg = ap_const_lv1_1))) then 
            OutConv5_we0 <= ap_const_logic_1;
        else 
            OutConv5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv5_address0 <= zext_ln151_4_fu_561_p1(11 - 1 downto 0);

    OutPadConv5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPadConv5_ce0 <= ap_const_logic_1;
        else 
            OutPadConv5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Weights_address0 <= arrayidx37_sum_cast_fu_623_p1(14 - 1 downto 0);
    Weights_address1 <= zext_ln151_2_fu_468_p1(14 - 1 downto 0);

    Weights_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Weights_ce0 <= ap_const_logic_1;
        else 
            Weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Weights_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Weights_ce1 <= ap_const_logic_1;
        else 
            Weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln143_1_fu_292_p2 <= std_logic_vector(unsigned(n_fu_120) + unsigned(ap_const_lv5_1));
    add_ln143_fu_247_p2 <= std_logic_vector(unsigned(indvar_flatten122_fu_124) + unsigned(ap_const_lv17_1));
    add_ln145_1_fu_577_p2 <= std_logic_vector(unsigned(indvar_flatten98_load_reg_760) + unsigned(ap_const_lv14_1));
    add_ln145_fu_521_p2 <= std_logic_vector(unsigned(select_ln143_fu_514_p3) + unsigned(ap_const_lv7_1));
    add_ln148_1_fu_565_p2 <= std_logic_vector(unsigned(indvar_flatten83_load_reg_755) + unsigned(ap_const_lv8_1));
    add_ln148_fu_344_p2 <= std_logic_vector(unsigned(select_ln145_fu_312_p3) + unsigned(ap_const_lv5_1));
    add_ln150_fu_473_p2 <= std_logic_vector(unsigned(select_ln146_fu_362_p3) + unsigned(ap_const_lv3_1));
    add_ln151_1_fu_462_p2 <= std_logic_vector(unsigned(zext_ln151_1_fu_458_p1) + unsigned(zext_ln151_fu_442_p1));
    add_ln151_2_fu_446_p2 <= std_logic_vector(unsigned(zext_ln150_1_fu_432_p1) + unsigned(ap_const_lv11_4EC));
    add_ln151_4_fu_452_p2 <= std_logic_vector(unsigned(add_ln151_2_fu_446_p2) + unsigned(p_shl39_cast_fu_428_p1));
    add_ln151_5_fu_541_p2 <= std_logic_vector(unsigned(select_ln145_2_fu_527_p3) + unsigned(zext_ln150_fu_538_p1));
    add_ln151_fu_436_p2 <= std_logic_vector(unsigned(empty_151_fu_406_p2) + unsigned(zext_ln148_fu_412_p1));
    add_ln153_fu_551_p2 <= std_logic_vector(unsigned(zext_ln145_fu_534_p1) + unsigned(empty_151_reg_796));
    and_ln143_1_fu_286_p2 <= (xor_ln143_fu_268_p2 and icmp_ln148_fu_280_p2);
    and_ln143_fu_332_p2 <= (xor_ln143_fu_268_p2 and icmp_ln150_fu_274_p2);
    and_ln145_fu_338_p2 <= (or_ln145_1_fu_326_p2 and and_ln143_fu_332_p2);
    and_ln153_fu_672_p2 <= (or_ln153_fu_666_p2 and grp_fu_1469_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln143_reg_765)
    begin
        if (((icmp_ln143_reg_765 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    arrayidx37_sum_cast_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx37_sum_fu_617_p2),64));
    arrayidx37_sum_fu_617_p2 <= std_logic_vector(unsigned(zext_ln143_fu_614_p1) + unsigned(ap_const_lv12_9EC));
    bitcast_ln151_fu_599_p1 <= Weights_load_90_reg_819;
    bitcast_ln153_fu_637_p1 <= add28_i5_reg_879;
    empty_151_fu_406_p2 <= std_logic_vector(unsigned(p_shl37_cast_fu_390_p1) + unsigned(p_shl38_cast_fu_402_p1));
    empty_152_fu_633_p1 <= Weights_load_reg_864;
    empty_153_fu_416_p1 <= select_ln148_fu_370_p3(4 - 1 downto 0);
    empty_fu_378_p1 <= select_ln143_1_fu_298_p3(4 - 1 downto 0);
    grp_fu_1453_p_ce <= ap_const_logic_1;
    grp_fu_1453_p_din0 <= grp_fu_179_p0;
    grp_fu_1453_p_din1 <= grp_fu_179_p1;
    grp_fu_1453_p_opcode <= ap_const_lv2_0;
    grp_fu_1461_p_ce <= ap_const_logic_1;
    grp_fu_1461_p_din0 <= bitcast_ln151_fu_599_p1;
    grp_fu_1461_p_din1 <= OutPadConv5_load_reg_839;
    grp_fu_1469_p_ce <= ap_const_logic_1;
    grp_fu_1469_p_din0 <= add28_i5_reg_879;
    grp_fu_1469_p_din1 <= ap_const_lv32_0;
    grp_fu_1469_p_opcode <= ap_const_lv5_4;

    grp_fu_179_p0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, select_ln145_1_fu_606_p3, s_reg_869, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_179_p0 <= s_reg_869;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_179_p0 <= select_ln145_1_fu_606_p3;
        else 
            grp_fu_179_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_179_p1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, mul21_i5_reg_849, empty_152_fu_633_p1, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_179_p1 <= empty_152_fu_633_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_179_p1 <= mul21_i5_reg_849;
        else 
            grp_fu_179_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_690_p0 <= zext_ln148_fu_412_p1(5 - 1 downto 0);
    grp_fu_690_p1 <= ap_const_lv11_54(7 - 1 downto 0);
    grp_fu_690_p2 <= grp_fu_690_p20(7 - 1 downto 0);
    grp_fu_690_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln151_5_fu_541_p2),11));
    icmp_ln143_fu_241_p2 <= "1" when (indvar_flatten122_fu_124 = ap_const_lv17_19000) else "0";
    icmp_ln145_fu_262_p2 <= "1" when (indvar_flatten98_fu_116 = ap_const_lv14_1900) else "0";
    icmp_ln148_1_fu_485_p2 <= "1" when (select_ln148_fu_370_p3 = ap_const_lv5_F) else "0";
    icmp_ln148_fu_280_p2 <= "1" when (indvar_flatten83_fu_108 = ap_const_lv8_50) else "0";
    icmp_ln150_1_fu_479_p2 <= "1" when (add_ln150_fu_473_p2 = ap_const_lv3_5) else "0";
    icmp_ln150_fu_274_p2 <= "1" when (j_fu_100 = ap_const_lv3_5) else "0";
    icmp_ln153_1_fu_660_p2 <= "1" when (trunc_ln153_fu_650_p1 = ap_const_lv23_0) else "0";
    icmp_ln153_fu_654_p2 <= "0" when (tmp_s_fu_640_p4 = ap_const_lv8_FF) else "1";
    or_ln145_1_fu_326_p2 <= (xor_ln145_fu_320_p2 or icmp_ln145_fu_262_p2);
    or_ln145_fu_306_p2 <= (icmp_ln145_fu_262_p2 or and_ln143_1_fu_286_p2);
    or_ln146_1_fu_356_p2 <= (or_ln146_fu_350_p2 or icmp_ln145_fu_262_p2);
    or_ln146_fu_350_p2 <= (and_ln145_fu_338_p2 or and_ln143_1_fu_286_p2);
    or_ln153_fu_666_p2 <= (icmp_ln153_fu_654_p2 or icmp_ln153_1_fu_660_p2);
    p_shl22_fu_394_p3 <= (empty_fu_378_p1 & ap_const_lv4_0);
    p_shl23_fu_420_p3 <= (empty_153_fu_416_p1 & ap_const_lv2_0);
    p_shl37_cast_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_382_p3),11));
    p_shl38_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl22_fu_394_p3),11));
    p_shl39_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl23_fu_420_p3),11));
    p_shl_fu_382_p3 <= (empty_fu_378_p1 & ap_const_lv6_0);
    select_ln143_1_fu_298_p3 <= 
        add_ln143_1_fu_292_p2 when (icmp_ln145_fu_262_p2(0) = '1') else 
        n_fu_120;
    select_ln143_fu_514_p3 <= 
        ap_const_lv7_0 when (icmp_ln145_reg_769(0) = '1') else 
        y_fu_112;
    select_ln145_1_fu_606_p3 <= 
        ap_const_lv32_0 when (or_ln145_reg_785_pp0_iter1_reg(0) = '1') else 
        s_126_fu_96;
    select_ln145_2_fu_527_p3 <= 
        add_ln145_fu_521_p2 when (and_ln143_1_reg_775(0) = '1') else 
        select_ln143_fu_514_p3;
    select_ln145_3_fu_582_p3 <= 
        ap_const_lv14_1 when (icmp_ln145_reg_769(0) = '1') else 
        add_ln145_1_fu_577_p2;
    select_ln145_fu_312_p3 <= 
        ap_const_lv5_0 when (or_ln145_fu_306_p2(0) = '1') else 
        k_fu_104;
    select_ln146_fu_362_p3 <= 
        ap_const_lv3_0 when (or_ln146_1_fu_356_p2(0) = '1') else 
        j_fu_100;
    select_ln148_1_fu_570_p3 <= 
        ap_const_lv8_1 when (or_ln145_reg_785(0) = '1') else 
        add_ln148_1_fu_565_p2;
    select_ln148_fu_370_p3 <= 
        add_ln148_fu_344_p2 when (and_ln145_fu_338_p2(0) = '1') else 
        select_ln145_fu_312_p3;
    tmp_s_fu_640_p4 <= bitcast_ln153_fu_637_p1(30 downto 23);
    trunc_ln153_fu_650_p1 <= bitcast_ln153_fu_637_p1(23 - 1 downto 0);
    xor_ln143_fu_268_p2 <= (icmp_ln145_fu_262_p2 xor ap_const_lv1_1);
    xor_ln145_fu_320_p2 <= (icmp_ln148_fu_280_p2 xor ap_const_lv1_1);
    zext_ln143_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln143_1_reg_780_pp0_iter1_reg),12));
    zext_ln145_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln145_2_fu_527_p3),11));
    zext_ln148_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln148_fu_370_p3),11));
    zext_ln150_1_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln146_fu_362_p3),11));
    zext_ln150_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln146_reg_791),7));
    zext_ln151_1_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln151_4_fu_452_p2),12));
    zext_ln151_2_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln151_1_fu_462_p2),64));
    zext_ln151_4_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_690_p3),64));
    zext_ln151_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln151_fu_436_p2),12));
    zext_ln153_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln153_reg_829_pp0_iter3_reg),64));
end behav;
