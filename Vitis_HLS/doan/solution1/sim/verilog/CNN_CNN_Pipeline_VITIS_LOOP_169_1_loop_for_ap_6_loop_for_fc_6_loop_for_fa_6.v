// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_VITIS_LOOP_169_1_loop_for_ap_6_loop_for_fc_6_loop_for_fa_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Weights_address0,
        Weights_ce0,
        Weights_q0,
        Weights_address1,
        Weights_ce1,
        Weights_q1,
        OutPadConv6_address0,
        OutPadConv6_ce0,
        OutPadConv6_q0,
        OutConv6_address0,
        OutConv6_ce0,
        OutConv6_we0,
        OutConv6_d0,
        grp_fu_1453_p_din0,
        grp_fu_1453_p_din1,
        grp_fu_1453_p_opcode,
        grp_fu_1453_p_dout0,
        grp_fu_1453_p_ce,
        grp_fu_1461_p_din0,
        grp_fu_1461_p_din1,
        grp_fu_1461_p_dout0,
        grp_fu_1461_p_ce,
        grp_fu_1469_p_din0,
        grp_fu_1469_p_din1,
        grp_fu_1469_p_opcode,
        grp_fu_1469_p_dout0,
        grp_fu_1469_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] Weights_address0;
output   Weights_ce0;
input  [31:0] Weights_q0;
output  [13:0] Weights_address1;
output   Weights_ce1;
input  [31:0] Weights_q1;
output  [9:0] OutPadConv6_address0;
output   OutPadConv6_ce0;
input  [31:0] OutPadConv6_q0;
output  [10:0] OutConv6_address0;
output   OutConv6_ce0;
output   OutConv6_we0;
output  [31:0] OutConv6_d0;
output  [31:0] grp_fu_1453_p_din0;
output  [31:0] grp_fu_1453_p_din1;
output  [1:0] grp_fu_1453_p_opcode;
input  [31:0] grp_fu_1453_p_dout0;
output   grp_fu_1453_p_ce;
output  [31:0] grp_fu_1461_p_din0;
output  [31:0] grp_fu_1461_p_din1;
input  [31:0] grp_fu_1461_p_dout0;
output   grp_fu_1461_p_ce;
output  [31:0] grp_fu_1469_p_din0;
output  [31:0] grp_fu_1469_p_din1;
output  [4:0] grp_fu_1469_p_opcode;
input  [0:0] grp_fu_1469_p_dout0;
output   grp_fu_1469_p_ce;

reg ap_idle;
reg Weights_ce0;
reg Weights_ce1;
reg OutPadConv6_ce0;
reg OutConv6_ce0;
reg OutConv6_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln169_reg_804;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] indvar_flatten143_load_reg_794;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
reg   [12:0] indvar_flatten158_load_reg_799;
wire   [0:0] icmp_ln169_fu_243_p2;
wire   [0:0] icmp_ln171_fu_264_p2;
reg   [0:0] icmp_ln171_reg_808;
wire   [0:0] and_ln169_1_fu_288_p2;
reg   [0:0] and_ln169_1_reg_814;
wire   [5:0] select_ln169_1_fu_300_p3;
reg   [5:0] select_ln169_1_reg_819;
reg   [5:0] select_ln169_1_reg_819_pp0_iter1_reg;
wire   [0:0] or_ln171_fu_308_p2;
reg   [0:0] or_ln171_reg_824;
reg   [0:0] or_ln171_reg_824_pp0_iter1_reg;
wire   [2:0] select_ln172_fu_364_p3;
reg   [2:0] select_ln172_reg_830;
wire   [4:0] empty_fu_380_p1;
reg   [4:0] empty_reg_835;
reg   [4:0] empty_reg_835_pp0_iter1_reg;
reg   [4:0] empty_reg_835_pp0_iter2_reg;
reg   [4:0] empty_reg_835_pp0_iter3_reg;
reg   [4:0] empty_reg_835_pp0_iter4_reg;
wire   [0:0] icmp_ln176_1_fu_485_p2;
reg   [0:0] icmp_ln176_1_reg_851;
reg   [0:0] icmp_ln176_1_reg_851_pp0_iter1_reg;
reg   [0:0] icmp_ln176_1_reg_851_pp0_iter2_reg;
reg   [0:0] icmp_ln176_1_reg_851_pp0_iter3_reg;
reg   [0:0] icmp_ln176_1_reg_851_pp0_iter4_reg;
wire   [0:0] icmp_ln174_1_fu_491_p2;
reg   [0:0] icmp_ln174_1_reg_855;
reg   [0:0] icmp_ln174_1_reg_855_pp0_iter1_reg;
reg   [0:0] icmp_ln174_1_reg_855_pp0_iter2_reg;
reg   [0:0] icmp_ln174_1_reg_855_pp0_iter3_reg;
reg   [0:0] icmp_ln174_1_reg_855_pp0_iter4_reg;
reg   [31:0] Weights_load_89_reg_859;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
wire   [5:0] select_ln171_2_fu_533_p3;
reg   [5:0] select_ln171_2_reg_864;
wire    ap_block_pp0_stage3_11001;
reg   [5:0] select_ln171_2_reg_864_pp0_iter1_reg;
reg   [5:0] select_ln171_2_reg_864_pp0_iter2_reg;
reg   [5:0] select_ln171_2_reg_864_pp0_iter3_reg;
reg   [31:0] OutPadConv6_load_reg_879;
wire   [31:0] bitcast_ln177_fu_596_p1;
reg   [31:0] mul21_i6_reg_889;
wire   [31:0] select_ln171_1_fu_603_p3;
reg   [31:0] Weights_load_reg_904;
reg   [31:0] s_reg_909;
wire   [31:0] empty_149_fu_630_p1;
reg   [31:0] add28_i6_reg_919;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln177_3_fu_474_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln177_5_fu_558_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] arrayidx45_sum_cast_fu_620_p1;
wire   [63:0] zext_ln179_1_fu_716_p1;
wire    ap_block_pp0_stage3;
reg   [31:0] s_128_fu_98;
wire    ap_loop_init;
reg   [2:0] j_fu_102;
wire   [2:0] add_ln176_fu_479_p2;
reg   [4:0] k_fu_106;
wire   [4:0] select_ln174_fu_372_p3;
reg   [7:0] indvar_flatten143_fu_110;
wire   [7:0] select_ln174_1_fu_567_p3;
reg   [5:0] y_fu_114;
reg   [12:0] indvar_flatten158_fu_118;
wire   [12:0] select_ln171_3_fu_579_p3;
reg   [5:0] n_fu_122;
reg   [16:0] indvar_flatten182_fu_126;
wire   [16:0] add_ln169_fu_249_p2;
reg   [31:0] grp_fu_181_p0;
reg   [31:0] grp_fu_181_p1;
wire    ap_block_pp0_stage2;
wire   [0:0] icmp_ln174_fu_282_p2;
wire   [0:0] xor_ln169_fu_270_p2;
wire   [5:0] add_ln169_1_fu_294_p2;
wire   [0:0] xor_ln171_fu_322_p2;
wire   [0:0] icmp_ln176_fu_276_p2;
wire   [0:0] and_ln169_fu_334_p2;
wire   [0:0] or_ln171_1_fu_328_p2;
wire   [4:0] select_ln171_fu_314_p3;
wire   [0:0] and_ln171_fu_340_p2;
wire   [0:0] or_ln172_fu_352_p2;
wire   [0:0] or_ln172_1_fu_358_p2;
wire   [4:0] add_ln174_fu_346_p2;
wire   [10:0] p_shl_fu_384_p3;
wire   [3:0] empty_150_fu_412_p1;
wire   [5:0] p_shl21_fu_416_p3;
wire   [8:0] p_shl18_fu_396_p3;
wire   [8:0] zext_ln174_fu_404_p1;
wire   [8:0] add_ln177_fu_432_p2;
wire   [11:0] zext_ln177_fu_438_p1;
wire   [11:0] p_shl48_cast_fu_392_p1;
wire   [11:0] add_ln177_2_fu_442_p2;
wire   [11:0] zext_ln176_2_fu_428_p1;
wire   [11:0] add_ln177_4_fu_452_p2;
wire   [11:0] p_shl50_cast_fu_424_p1;
wire   [11:0] add_ln177_5_fu_458_p2;
wire   [12:0] zext_ln177_2_fu_464_p1;
wire   [12:0] zext_ln177_1_fu_448_p1;
wire   [12:0] add_ln177_1_fu_468_p2;
wire   [5:0] select_ln169_fu_520_p3;
wire   [5:0] add_ln171_fu_527_p2;
wire   [5:0] zext_ln176_1_fu_540_p1;
wire   [5:0] add_ln177_6_fu_543_p2;
wire   [9:0] grp_fu_729_p3;
wire   [7:0] add_ln174_1_fu_562_p2;
wire   [12:0] add_ln171_1_fu_574_p2;
wire   [12:0] zext_ln169_fu_611_p1;
wire   [12:0] arrayidx45_sum_fu_614_p2;
wire   [9:0] p_shl19_fu_634_p3;
wire   [7:0] p_shl20_fu_645_p3;
wire   [31:0] bitcast_ln179_fu_659_p1;
wire   [7:0] tmp_s_fu_662_p4;
wire   [22:0] trunc_ln179_fu_672_p1;
wire   [0:0] icmp_ln179_1_fu_682_p2;
wire   [0:0] icmp_ln179_fu_676_p2;
wire   [0:0] or_ln179_fu_688_p2;
wire   [8:0] zext_ln171_fu_652_p1;
wire   [8:0] zext_ln171_1_fu_656_p1;
wire   [8:0] add_ln179_1_fu_700_p2;
wire   [10:0] zext_ln179_fu_706_p1;
wire   [10:0] p_shl46_cast_fu_641_p1;
wire   [10:0] add_ln179_fu_710_p2;
wire   [0:0] and_ln179_fu_694_p2;
wire   [4:0] grp_fu_729_p0;
wire   [5:0] grp_fu_729_p1;
wire   [5:0] grp_fu_729_p2;
wire    ap_block_pp0_stage2_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage1_00001;
wire   [9:0] grp_fu_729_p00;
wire   [9:0] grp_fu_729_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 s_128_fu_98 = 32'd0;
#0 j_fu_102 = 3'd0;
#0 k_fu_106 = 5'd0;
#0 indvar_flatten143_fu_110 = 8'd0;
#0 y_fu_114 = 6'd0;
#0 indvar_flatten158_fu_118 = 13'd0;
#0 n_fu_122 = 6'd0;
#0 indvar_flatten182_fu_126 = 17'd0;
#0 ap_done_reg = 1'b0;
end

CNN_mac_muladd_5ns_6ns_6ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mac_muladd_5ns_6ns_6ns_10_4_1_U89(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_729_p0),
    .din1(grp_fu_729_p1),
    .din2(grp_fu_729_p2),
    .ce(1'b1),
    .dout(grp_fu_729_p3)
);

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten143_fu_110 <= 8'd0;
        end else if (((icmp_ln169_reg_804 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten143_fu_110 <= select_ln174_1_fu_567_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten158_fu_118 <= 13'd0;
        end else if (((icmp_ln169_reg_804 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten158_fu_118 <= select_ln171_3_fu_579_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten182_fu_126 <= 17'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln169_fu_243_p2 == 1'd0))) begin
        indvar_flatten182_fu_126 <= add_ln169_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_fu_102 <= 3'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln169_fu_243_p2 == 1'd0))) begin
        j_fu_102 <= add_ln176_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_fu_106 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln169_fu_243_p2 == 1'd0))) begin
        k_fu_106 <= select_ln174_fu_372_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        n_fu_122 <= 6'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln169_fu_243_p2 == 1'd0))) begin
        n_fu_122 <= select_ln169_1_fu_300_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            s_128_fu_98 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            s_128_fu_98 <= grp_fu_1453_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_fu_114 <= 6'd0;
    end else if (((icmp_ln169_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        y_fu_114 <= select_ln171_2_fu_533_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        OutPadConv6_load_reg_879 <= OutPadConv6_q0;
        and_ln169_1_reg_814 <= and_ln169_1_fu_288_p2;
        empty_reg_835 <= empty_fu_380_p1;
        empty_reg_835_pp0_iter1_reg <= empty_reg_835;
        empty_reg_835_pp0_iter2_reg <= empty_reg_835_pp0_iter1_reg;
        empty_reg_835_pp0_iter3_reg <= empty_reg_835_pp0_iter2_reg;
        empty_reg_835_pp0_iter4_reg <= empty_reg_835_pp0_iter3_reg;
        icmp_ln169_reg_804 <= icmp_ln169_fu_243_p2;
        icmp_ln171_reg_808 <= icmp_ln171_fu_264_p2;
        icmp_ln174_1_reg_855 <= icmp_ln174_1_fu_491_p2;
        icmp_ln174_1_reg_855_pp0_iter1_reg <= icmp_ln174_1_reg_855;
        icmp_ln174_1_reg_855_pp0_iter2_reg <= icmp_ln174_1_reg_855_pp0_iter1_reg;
        icmp_ln174_1_reg_855_pp0_iter3_reg <= icmp_ln174_1_reg_855_pp0_iter2_reg;
        icmp_ln174_1_reg_855_pp0_iter4_reg <= icmp_ln174_1_reg_855_pp0_iter3_reg;
        icmp_ln176_1_reg_851 <= icmp_ln176_1_fu_485_p2;
        icmp_ln176_1_reg_851_pp0_iter1_reg <= icmp_ln176_1_reg_851;
        icmp_ln176_1_reg_851_pp0_iter2_reg <= icmp_ln176_1_reg_851_pp0_iter1_reg;
        icmp_ln176_1_reg_851_pp0_iter3_reg <= icmp_ln176_1_reg_851_pp0_iter2_reg;
        icmp_ln176_1_reg_851_pp0_iter4_reg <= icmp_ln176_1_reg_851_pp0_iter3_reg;
        indvar_flatten143_load_reg_794 <= indvar_flatten143_fu_110;
        indvar_flatten158_load_reg_799 <= indvar_flatten158_fu_118;
        or_ln171_reg_824 <= or_ln171_fu_308_p2;
        or_ln171_reg_824_pp0_iter1_reg <= or_ln171_reg_824;
        select_ln169_1_reg_819 <= select_ln169_1_fu_300_p3;
        select_ln169_1_reg_819_pp0_iter1_reg <= select_ln169_1_reg_819;
        select_ln172_reg_830 <= select_ln172_fu_364_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        Weights_load_89_reg_859 <= Weights_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        Weights_load_reg_904 <= Weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add28_i6_reg_919 <= grp_fu_1453_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        select_ln171_2_reg_864 <= select_ln171_2_fu_533_p3;
        select_ln171_2_reg_864_pp0_iter1_reg <= select_ln171_2_reg_864;
        select_ln171_2_reg_864_pp0_iter2_reg <= select_ln171_2_reg_864_pp0_iter1_reg;
        select_ln171_2_reg_864_pp0_iter3_reg <= select_ln171_2_reg_864_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul21_i6_reg_889 <= grp_fu_1461_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_reg_909 <= grp_fu_1453_p_dout0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        OutConv6_ce0 = 1'b1;
    end else begin
        OutConv6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln174_1_reg_855_pp0_iter4_reg == 1'd1) & (icmp_ln176_1_reg_851_pp0_iter4_reg == 1'd1))) begin
        OutConv6_we0 = 1'b1;
    end else begin
        OutConv6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutPadConv6_ce0 = 1'b1;
    end else begin
        OutPadConv6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Weights_ce0 = 1'b1;
    end else begin
        Weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Weights_ce1 = 1'b1;
    end else begin
        Weights_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln169_reg_804 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_181_p0 = s_reg_909;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_181_p0 = select_ln171_1_fu_603_p3;
    end else begin
        grp_fu_181_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_181_p1 = empty_149_fu_630_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_181_p1 = mul21_i6_reg_889;
    end else begin
        grp_fu_181_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv6_address0 = zext_ln179_1_fu_716_p1;

assign OutConv6_d0 = ((and_ln179_fu_694_p2[0:0] == 1'b1) ? 32'd0 : add28_i6_reg_919);

assign OutPadConv6_address0 = zext_ln177_5_fu_558_p1;

assign Weights_address0 = arrayidx45_sum_cast_fu_620_p1;

assign Weights_address1 = zext_ln177_3_fu_474_p1;

assign add_ln169_1_fu_294_p2 = (n_fu_122 + 6'd1);

assign add_ln169_fu_249_p2 = (indvar_flatten182_fu_126 + 17'd1);

assign add_ln171_1_fu_574_p2 = (indvar_flatten158_load_reg_799 + 13'd1);

assign add_ln171_fu_527_p2 = (select_ln169_fu_520_p3 + 6'd1);

assign add_ln174_1_fu_562_p2 = (indvar_flatten143_load_reg_794 + 8'd1);

assign add_ln174_fu_346_p2 = (select_ln171_fu_314_p3 + 5'd1);

assign add_ln176_fu_479_p2 = (select_ln172_fu_364_p3 + 3'd1);

assign add_ln177_1_fu_468_p2 = (zext_ln177_2_fu_464_p1 + zext_ln177_1_fu_448_p1);

assign add_ln177_2_fu_442_p2 = (zext_ln177_fu_438_p1 + p_shl48_cast_fu_392_p1);

assign add_ln177_4_fu_452_p2 = ($signed(zext_ln176_2_fu_428_p1) + $signed(12'd2556));

assign add_ln177_5_fu_458_p2 = (add_ln177_4_fu_452_p2 + p_shl50_cast_fu_424_p1);

assign add_ln177_6_fu_543_p2 = (select_ln171_2_fu_533_p3 + zext_ln176_1_fu_540_p1);

assign add_ln177_fu_432_p2 = (p_shl18_fu_396_p3 + zext_ln174_fu_404_p1);

assign add_ln179_1_fu_700_p2 = (zext_ln171_fu_652_p1 + zext_ln171_1_fu_656_p1);

assign add_ln179_fu_710_p2 = (zext_ln179_fu_706_p1 + p_shl46_cast_fu_641_p1);

assign and_ln169_1_fu_288_p2 = (xor_ln169_fu_270_p2 & icmp_ln174_fu_282_p2);

assign and_ln169_fu_334_p2 = (xor_ln169_fu_270_p2 & icmp_ln176_fu_276_p2);

assign and_ln171_fu_340_p2 = (or_ln171_1_fu_328_p2 & and_ln169_fu_334_p2);

assign and_ln179_fu_694_p2 = (or_ln179_fu_688_p2 & grp_fu_1469_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign arrayidx45_sum_cast_fu_620_p1 = arrayidx45_sum_fu_614_p2;

assign arrayidx45_sum_fu_614_p2 = ($signed(zext_ln169_fu_611_p1) + $signed(13'd5116));

assign bitcast_ln177_fu_596_p1 = Weights_load_89_reg_859;

assign bitcast_ln179_fu_659_p1 = add28_i6_reg_919;

assign empty_149_fu_630_p1 = Weights_load_reg_904;

assign empty_150_fu_412_p1 = select_ln174_fu_372_p3[3:0];

assign empty_fu_380_p1 = select_ln169_1_fu_300_p3[4:0];

assign grp_fu_1453_p_ce = 1'b1;

assign grp_fu_1453_p_din0 = grp_fu_181_p0;

assign grp_fu_1453_p_din1 = grp_fu_181_p1;

assign grp_fu_1453_p_opcode = 2'd0;

assign grp_fu_1461_p_ce = 1'b1;

assign grp_fu_1461_p_din0 = bitcast_ln177_fu_596_p1;

assign grp_fu_1461_p_din1 = OutPadConv6_load_reg_879;

assign grp_fu_1469_p_ce = 1'b1;

assign grp_fu_1469_p_din0 = add28_i6_reg_919;

assign grp_fu_1469_p_din1 = 32'd0;

assign grp_fu_1469_p_opcode = 5'd4;

assign grp_fu_729_p0 = grp_fu_729_p00;

assign grp_fu_729_p00 = select_ln174_fu_372_p3;

assign grp_fu_729_p1 = 10'd44;

assign grp_fu_729_p2 = grp_fu_729_p20;

assign grp_fu_729_p20 = add_ln177_6_fu_543_p2;

assign icmp_ln169_fu_243_p2 = ((indvar_flatten182_fu_126 == 17'd102400) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_264_p2 = ((indvar_flatten158_fu_118 == 13'd3200) ? 1'b1 : 1'b0);

assign icmp_ln174_1_fu_491_p2 = ((select_ln174_fu_372_p3 == 5'd15) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_282_p2 = ((indvar_flatten143_fu_110 == 8'd80) ? 1'b1 : 1'b0);

assign icmp_ln176_1_fu_485_p2 = ((add_ln176_fu_479_p2 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln176_fu_276_p2 = ((j_fu_102 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln179_1_fu_682_p2 = ((trunc_ln179_fu_672_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln179_fu_676_p2 = ((tmp_s_fu_662_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln171_1_fu_328_p2 = (xor_ln171_fu_322_p2 | icmp_ln171_fu_264_p2);

assign or_ln171_fu_308_p2 = (icmp_ln171_fu_264_p2 | and_ln169_1_fu_288_p2);

assign or_ln172_1_fu_358_p2 = (or_ln172_fu_352_p2 | icmp_ln171_fu_264_p2);

assign or_ln172_fu_352_p2 = (and_ln171_fu_340_p2 | and_ln169_1_fu_288_p2);

assign or_ln179_fu_688_p2 = (icmp_ln179_fu_676_p2 | icmp_ln179_1_fu_682_p2);

assign p_shl18_fu_396_p3 = {{empty_fu_380_p1}, {4'd0}};

assign p_shl19_fu_634_p3 = {{empty_reg_835_pp0_iter4_reg}, {5'd0}};

assign p_shl20_fu_645_p3 = {{empty_reg_835_pp0_iter4_reg}, {3'd0}};

assign p_shl21_fu_416_p3 = {{empty_150_fu_412_p1}, {2'd0}};

assign p_shl46_cast_fu_641_p1 = p_shl19_fu_634_p3;

assign p_shl48_cast_fu_392_p1 = p_shl_fu_384_p3;

assign p_shl50_cast_fu_424_p1 = p_shl21_fu_416_p3;

assign p_shl_fu_384_p3 = {{empty_fu_380_p1}, {6'd0}};

assign select_ln169_1_fu_300_p3 = ((icmp_ln171_fu_264_p2[0:0] == 1'b1) ? add_ln169_1_fu_294_p2 : n_fu_122);

assign select_ln169_fu_520_p3 = ((icmp_ln171_reg_808[0:0] == 1'b1) ? 6'd0 : y_fu_114);

assign select_ln171_1_fu_603_p3 = ((or_ln171_reg_824_pp0_iter1_reg[0:0] == 1'b1) ? 32'd0 : s_128_fu_98);

assign select_ln171_2_fu_533_p3 = ((and_ln169_1_reg_814[0:0] == 1'b1) ? add_ln171_fu_527_p2 : select_ln169_fu_520_p3);

assign select_ln171_3_fu_579_p3 = ((icmp_ln171_reg_808[0:0] == 1'b1) ? 13'd1 : add_ln171_1_fu_574_p2);

assign select_ln171_fu_314_p3 = ((or_ln171_fu_308_p2[0:0] == 1'b1) ? 5'd0 : k_fu_106);

assign select_ln172_fu_364_p3 = ((or_ln172_1_fu_358_p2[0:0] == 1'b1) ? 3'd0 : j_fu_102);

assign select_ln174_1_fu_567_p3 = ((or_ln171_reg_824[0:0] == 1'b1) ? 8'd1 : add_ln174_1_fu_562_p2);

assign select_ln174_fu_372_p3 = ((and_ln171_fu_340_p2[0:0] == 1'b1) ? add_ln174_fu_346_p2 : select_ln171_fu_314_p3);

assign tmp_s_fu_662_p4 = {{bitcast_ln179_fu_659_p1[30:23]}};

assign trunc_ln179_fu_672_p1 = bitcast_ln179_fu_659_p1[22:0];

assign xor_ln169_fu_270_p2 = (icmp_ln171_fu_264_p2 ^ 1'd1);

assign xor_ln171_fu_322_p2 = (icmp_ln174_fu_282_p2 ^ 1'd1);

assign zext_ln169_fu_611_p1 = select_ln169_1_reg_819_pp0_iter1_reg;

assign zext_ln171_1_fu_656_p1 = select_ln171_2_reg_864_pp0_iter3_reg;

assign zext_ln171_fu_652_p1 = p_shl20_fu_645_p3;

assign zext_ln174_fu_404_p1 = select_ln174_fu_372_p3;

assign zext_ln176_1_fu_540_p1 = select_ln172_reg_830;

assign zext_ln176_2_fu_428_p1 = select_ln172_fu_364_p3;

assign zext_ln177_1_fu_448_p1 = add_ln177_2_fu_442_p2;

assign zext_ln177_2_fu_464_p1 = add_ln177_5_fu_458_p2;

assign zext_ln177_3_fu_474_p1 = add_ln177_1_fu_468_p2;

assign zext_ln177_5_fu_558_p1 = grp_fu_729_p3;

assign zext_ln177_fu_438_p1 = add_ln177_fu_432_p2;

assign zext_ln179_1_fu_716_p1 = add_ln179_fu_710_p2;

assign zext_ln179_fu_706_p1 = add_ln179_1_fu_700_p2;

endmodule //CNN_CNN_Pipeline_VITIS_LOOP_169_1_loop_for_ap_6_loop_for_fc_6_loop_for_fa_6
