// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_for_channel_pool_1_loop_for_weight_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        OutConv3_address0,
        OutConv3_ce0,
        OutConv3_q0,
        OutConv3_address1,
        OutConv3_ce1,
        OutConv3_q1,
        OutPool1_address0,
        OutPool1_ce0,
        OutPool1_we0,
        OutPool1_d0,
        grp_fu_1469_p_din0,
        grp_fu_1469_p_din1,
        grp_fu_1469_p_opcode,
        grp_fu_1469_p_dout0,
        grp_fu_1469_p_ce,
        grp_fu_1473_p_din0,
        grp_fu_1473_p_din1,
        grp_fu_1473_p_opcode,
        grp_fu_1473_p_dout0,
        grp_fu_1473_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] OutConv3_address0;
output   OutConv3_ce0;
input  [31:0] OutConv3_q0;
output  [10:0] OutConv3_address1;
output   OutConv3_ce1;
input  [31:0] OutConv3_q1;
output  [9:0] OutPool1_address0;
output   OutPool1_ce0;
output   OutPool1_we0;
output  [31:0] OutPool1_d0;
output  [31:0] grp_fu_1469_p_din0;
output  [31:0] grp_fu_1469_p_din1;
output  [4:0] grp_fu_1469_p_opcode;
input  [0:0] grp_fu_1469_p_dout0;
output   grp_fu_1469_p_ce;
output  [31:0] grp_fu_1473_p_din0;
output  [31:0] grp_fu_1473_p_din1;
output  [4:0] grp_fu_1473_p_opcode;
input  [0:0] grp_fu_1473_p_dout0;
output   grp_fu_1473_p_ce;

reg ap_idle;
reg OutConv3_ce0;
reg OutConv3_ce1;
reg OutPool1_ce0;
reg OutPool1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln28_fu_149_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] select_ln28_fu_173_p3;
reg   [6:0] select_ln28_reg_498;
reg   [6:0] select_ln28_reg_498_pp0_iter1_reg;
reg   [6:0] select_ln28_reg_498_pp0_iter2_reg;
wire   [2:0] empty_fu_195_p1;
reg   [2:0] empty_reg_503;
reg   [2:0] empty_reg_503_pp0_iter1_reg;
reg   [2:0] empty_reg_503_pp0_iter2_reg;
wire   [10:0] add_ln35_1_fu_258_p2;
reg   [10:0] add_ln35_1_reg_514;
reg   [31:0] pool_value_reg_519;
wire   [31:0] max_8_fu_330_p3;
reg   [31:0] max_8_reg_531;
reg   [31:0] pool_value_3_reg_538;
wire   [63:0] zext_ln36_fu_247_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln36_1_fu_285_p1;
wire   [63:0] zext_ln40_fu_468_p1;
reg   [6:0] y_fu_70;
wire   [6:0] add_ln41_fu_264_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_y_load;
reg   [3:0] z_fu_74;
wire   [3:0] select_ln28_1_fu_187_p3;
reg   [3:0] ap_sig_allocacmp_z_load;
reg   [9:0] indvar_flatten55_fu_78;
wire   [9:0] add_ln28_fu_155_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten55_load;
wire   [0:0] icmp_ln31_fu_167_p2;
wire   [3:0] add_ln28_1_fu_181_p2;
wire   [9:0] p_shl_fu_199_p3;
wire   [7:0] p_shl7_fu_211_p3;
wire   [10:0] p_shl27_cast_fu_207_p1;
wire   [10:0] p_shl28_cast_fu_219_p1;
wire   [7:0] tmp_s_fu_229_p3;
wire   [10:0] zext_ln35_fu_237_p1;
wire   [10:0] empty_133_fu_223_p2;
wire   [10:0] add_ln35_fu_241_p2;
wire   [10:0] or_ln35_fu_252_p2;
wire   [31:0] bitcast_ln37_fu_289_p1;
wire   [7:0] tmp_11_fu_292_p4;
wire   [22:0] trunc_ln37_fu_302_p1;
wire   [0:0] icmp_ln37_1_fu_312_p2;
wire   [0:0] icmp_ln37_fu_306_p2;
wire   [0:0] or_ln37_fu_318_p2;
wire   [0:0] and_ln37_fu_324_p2;
wire   [8:0] p_shl8_fu_338_p3;
wire   [6:0] p_shl9_fu_349_p3;
wire   [31:0] bitcast_ln37_1_fu_363_p1;
wire   [31:0] bitcast_ln37_2_fu_380_p1;
wire   [7:0] tmp_13_fu_366_p4;
wire   [22:0] trunc_ln37_1_fu_376_p1;
wire   [0:0] icmp_ln37_3_fu_403_p2;
wire   [0:0] icmp_ln37_2_fu_397_p2;
wire   [7:0] tmp_14_fu_383_p4;
wire   [22:0] trunc_ln37_2_fu_393_p1;
wire   [0:0] icmp_ln37_5_fu_421_p2;
wire   [0:0] icmp_ln37_4_fu_415_p2;
wire   [0:0] or_ln37_1_fu_409_p2;
wire   [0:0] or_ln37_2_fu_427_p2;
wire   [0:0] and_ln37_1_fu_433_p2;
wire   [0:0] and_ln37_2_fu_439_p2;
wire   [7:0] zext_ln31_fu_356_p1;
wire   [7:0] zext_ln31_1_fu_360_p1;
wire   [7:0] add_ln39_fu_452_p2;
wire   [9:0] zext_ln39_fu_458_p1;
wire   [9:0] p_shl25_cast_fu_345_p1;
wire   [9:0] add_ln39_1_fu_462_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 y_fu_70 = 7'd0;
#0 z_fu_74 = 4'd0;
#0 indvar_flatten55_fu_78 = 10'd0;
#0 ap_done_reg = 1'b0;
end

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln28_fu_149_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten55_fu_78 <= add_ln28_fu_155_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten55_fu_78 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln28_fu_149_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            y_fu_70 <= add_ln41_fu_264_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_70 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln28_fu_149_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            z_fu_74 <= select_ln28_1_fu_187_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            z_fu_74 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln35_1_reg_514[10 : 1] <= add_ln35_1_fu_258_p2[10 : 1];
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_reg_503 <= empty_fu_195_p1;
        empty_reg_503_pp0_iter1_reg <= empty_reg_503;
        select_ln28_reg_498 <= select_ln28_fu_173_p3;
        select_ln28_reg_498_pp0_iter1_reg <= select_ln28_reg_498;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        empty_reg_503_pp0_iter2_reg <= empty_reg_503_pp0_iter1_reg;
        max_8_reg_531 <= max_8_fu_330_p3;
        select_ln28_reg_498_pp0_iter2_reg <= select_ln28_reg_498_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pool_value_3_reg_538 <= OutConv3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pool_value_reg_519 <= OutConv3_q1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutConv3_ce0 = 1'b1;
    end else begin
        OutConv3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutConv3_ce1 = 1'b1;
    end else begin
        OutConv3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OutPool1_ce0 = 1'b1;
    end else begin
        OutPool1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OutPool1_we0 = 1'b1;
    end else begin
        OutPool1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_149_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten55_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten55_load = indvar_flatten55_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_y_load = 7'd0;
    end else begin
        ap_sig_allocacmp_y_load = y_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_z_load = 4'd0;
    end else begin
        ap_sig_allocacmp_z_load = z_fu_74;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv3_address0 = zext_ln36_1_fu_285_p1;

assign OutConv3_address1 = zext_ln36_fu_247_p1;

assign OutPool1_address0 = zext_ln40_fu_468_p1;

assign OutPool1_d0 = ((and_ln37_2_fu_439_p2[0:0] == 1'b1) ? pool_value_3_reg_538 : max_8_reg_531);

assign add_ln28_1_fu_181_p2 = (ap_sig_allocacmp_z_load + 4'd1);

assign add_ln28_fu_155_p2 = (ap_sig_allocacmp_indvar_flatten55_load + 10'd1);

assign add_ln35_1_fu_258_p2 = (zext_ln35_fu_237_p1 + or_ln35_fu_252_p2);

assign add_ln35_fu_241_p2 = (zext_ln35_fu_237_p1 + empty_133_fu_223_p2);

assign add_ln39_1_fu_462_p2 = (zext_ln39_fu_458_p1 + p_shl25_cast_fu_345_p1);

assign add_ln39_fu_452_p2 = (zext_ln31_fu_356_p1 + zext_ln31_1_fu_360_p1);

assign add_ln41_fu_264_p2 = (select_ln28_fu_173_p3 + 7'd1);

assign and_ln37_1_fu_433_p2 = (or_ln37_2_fu_427_p2 & or_ln37_1_fu_409_p2);

assign and_ln37_2_fu_439_p2 = (grp_fu_1473_p_dout0 & and_ln37_1_fu_433_p2);

assign and_ln37_fu_324_p2 = (or_ln37_fu_318_p2 & grp_fu_1469_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln37_1_fu_363_p1 = pool_value_3_reg_538;

assign bitcast_ln37_2_fu_380_p1 = max_8_reg_531;

assign bitcast_ln37_fu_289_p1 = pool_value_reg_519;

assign empty_133_fu_223_p2 = (p_shl27_cast_fu_207_p1 + p_shl28_cast_fu_219_p1);

assign empty_fu_195_p1 = select_ln28_1_fu_187_p3[2:0];

assign grp_fu_1469_p_ce = 1'b1;

assign grp_fu_1469_p_din0 = OutConv3_q1;

assign grp_fu_1469_p_din1 = 32'd3240099840;

assign grp_fu_1469_p_opcode = 5'd2;

assign grp_fu_1473_p_ce = 1'b1;

assign grp_fu_1473_p_din0 = OutConv3_q0;

assign grp_fu_1473_p_din1 = max_8_fu_330_p3;

assign grp_fu_1473_p_opcode = 5'd2;

assign icmp_ln28_fu_149_p2 = ((ap_sig_allocacmp_indvar_flatten55_load == 10'd640) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_167_p2 = ((ap_sig_allocacmp_y_load == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln37_1_fu_312_p2 = ((trunc_ln37_fu_302_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln37_2_fu_397_p2 = ((tmp_13_fu_366_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln37_3_fu_403_p2 = ((trunc_ln37_1_fu_376_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln37_4_fu_415_p2 = ((tmp_14_fu_383_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln37_5_fu_421_p2 = ((trunc_ln37_2_fu_393_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_306_p2 = ((tmp_11_fu_292_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_8_fu_330_p3 = ((and_ln37_fu_324_p2[0:0] == 1'b1) ? pool_value_reg_519 : 32'd3240099840);

assign or_ln35_fu_252_p2 = (empty_133_fu_223_p2 | 11'd1);

assign or_ln37_1_fu_409_p2 = (icmp_ln37_3_fu_403_p2 | icmp_ln37_2_fu_397_p2);

assign or_ln37_2_fu_427_p2 = (icmp_ln37_5_fu_421_p2 | icmp_ln37_4_fu_415_p2);

assign or_ln37_fu_318_p2 = (icmp_ln37_fu_306_p2 | icmp_ln37_1_fu_312_p2);

assign p_shl25_cast_fu_345_p1 = p_shl8_fu_338_p3;

assign p_shl27_cast_fu_207_p1 = p_shl_fu_199_p3;

assign p_shl28_cast_fu_219_p1 = p_shl7_fu_211_p3;

assign p_shl7_fu_211_p3 = {{empty_fu_195_p1}, {5'd0}};

assign p_shl8_fu_338_p3 = {{empty_reg_503_pp0_iter2_reg}, {6'd0}};

assign p_shl9_fu_349_p3 = {{empty_reg_503_pp0_iter2_reg}, {4'd0}};

assign p_shl_fu_199_p3 = {{empty_fu_195_p1}, {7'd0}};

assign select_ln28_1_fu_187_p3 = ((icmp_ln31_fu_167_p2[0:0] == 1'b1) ? add_ln28_1_fu_181_p2 : ap_sig_allocacmp_z_load);

assign select_ln28_fu_173_p3 = ((icmp_ln31_fu_167_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_y_load);

assign tmp_11_fu_292_p4 = {{bitcast_ln37_fu_289_p1[30:23]}};

assign tmp_13_fu_366_p4 = {{bitcast_ln37_1_fu_363_p1[30:23]}};

assign tmp_14_fu_383_p4 = {{bitcast_ln37_2_fu_380_p1[30:23]}};

assign tmp_s_fu_229_p3 = {{select_ln28_fu_173_p3}, {1'd0}};

assign trunc_ln37_1_fu_376_p1 = bitcast_ln37_1_fu_363_p1[22:0];

assign trunc_ln37_2_fu_393_p1 = bitcast_ln37_2_fu_380_p1[22:0];

assign trunc_ln37_fu_302_p1 = bitcast_ln37_fu_289_p1[22:0];

assign zext_ln31_1_fu_360_p1 = select_ln28_reg_498_pp0_iter2_reg;

assign zext_ln31_fu_356_p1 = p_shl9_fu_349_p3;

assign zext_ln35_fu_237_p1 = tmp_s_fu_229_p3;

assign zext_ln36_1_fu_285_p1 = add_ln35_1_reg_514;

assign zext_ln36_fu_247_p1 = add_ln35_fu_241_p2;

assign zext_ln39_fu_458_p1 = add_ln39_fu_452_p2;

assign zext_ln40_fu_468_p1 = add_ln39_1_fu_462_p2;

always @ (posedge ap_clk) begin
    add_ln35_1_reg_514[0] <= 1'b1;
end

endmodule //CNN_CNN_Pipeline_loop_for_channel_pool_1_loop_for_weight_pool_1
