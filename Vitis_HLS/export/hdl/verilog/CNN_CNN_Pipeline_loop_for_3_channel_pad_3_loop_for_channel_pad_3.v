// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_for_3_channel_pad_3_loop_for_channel_pad_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        OutPadConv3_address0,
        OutPadConv3_ce0,
        OutPadConv3_we0,
        OutPadConv3_d0,
        OutConv2_address0,
        OutConv2_ce0,
        OutConv2_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] OutPadConv3_address0;
output   OutPadConv3_ce0;
output   OutPadConv3_we0;
output  [31:0] OutPadConv3_d0;
output  [10:0] OutConv2_address0;
output   OutConv2_ce0;
input  [31:0] OutConv2_q0;

reg ap_idle;
reg OutPadConv3_ce0;
reg OutPadConv3_we0;
reg OutConv2_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln81_fu_116_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] select_ln81_fu_140_p3;
reg   [7:0] select_ln81_reg_318;
reg   [7:0] select_ln81_reg_318_pp0_iter1_reg;
wire   [2:0] empty_139_fu_166_p1;
reg   [2:0] empty_139_reg_330;
reg   [2:0] empty_139_reg_330_pp0_iter1_reg;
wire   [0:0] icmp_ln84_fu_180_p2;
reg   [0:0] icmp_ln84_reg_336;
reg   [0:0] icmp_ln84_reg_336_pp0_iter1_reg;
reg   [0:0] icmp_ln84_reg_336_pp0_iter2_reg;
wire   [0:0] icmp_ln84_1_fu_235_p2;
reg   [0:0] icmp_ln84_1_reg_346;
wire   [63:0] zext_ln84_1_fu_262_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln84_fu_271_p1;
reg   [7:0] n_fu_60;
wire   [7:0] add_ln83_fu_186_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_n_load;
reg   [3:0] c_fu_64;
wire   [3:0] select_ln81_1_fu_154_p3;
reg   [3:0] ap_sig_allocacmp_c_load;
reg   [10:0] indvar_flatten41_fu_68;
wire   [10:0] add_ln81_fu_122_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten41_load;
wire   [0:0] icmp_ln83_fu_134_p2;
wire   [3:0] add_ln81_1_fu_148_p2;
wire   [6:0] tmp_fu_170_p4;
wire   [9:0] p_shl11_fu_207_p3;
wire   [7:0] p_shl12_fu_218_p3;
wire   [10:0] p_shl19_cast_fu_214_p1;
wire   [10:0] zext_ln83_fu_225_p1;
wire   [8:0] zext_ln83_2_fu_232_p1;
wire   [8:0] add_ln84_3_fu_246_p2;
wire  signed [10:0] sext_ln84_fu_252_p1;
wire   [10:0] add_ln84_1_fu_240_p2;
wire   [10:0] add_ln84_2_fu_256_p2;
wire   [10:0] grp_fu_284_p3;
wire   [0:0] or_ln84_fu_267_p2;
wire   [3:0] grp_fu_284_p0;
wire   [7:0] grp_fu_284_p1;
wire   [7:0] grp_fu_284_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [10:0] grp_fu_284_p00;
wire   [10:0] grp_fu_284_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 n_fu_60 = 8'd0;
#0 c_fu_64 = 4'd0;
#0 indvar_flatten41_fu_68 = 11'd0;
#0 ap_done_reg = 1'b0;
end

CNN_mac_muladd_4ns_8ns_8ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 11 ))
mac_muladd_4ns_8ns_8ns_11_4_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_284_p0),
    .din1(grp_fu_284_p1),
    .din2(grp_fu_284_p2),
    .ce(1'b1),
    .dout(grp_fu_284_p3)
);

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln81_fu_116_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            c_fu_64 <= select_ln81_1_fu_154_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            c_fu_64 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln81_fu_116_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten41_fu_68 <= add_ln81_fu_122_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten41_fu_68 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln81_fu_116_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            n_fu_60 <= add_ln83_fu_186_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_fu_60 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_139_reg_330 <= empty_139_fu_166_p1;
        empty_139_reg_330_pp0_iter1_reg <= empty_139_reg_330;
        icmp_ln84_reg_336 <= icmp_ln84_fu_180_p2;
        icmp_ln84_reg_336_pp0_iter1_reg <= icmp_ln84_reg_336;
        select_ln81_reg_318 <= select_ln81_fu_140_p3;
        select_ln81_reg_318_pp0_iter1_reg <= select_ln81_reg_318;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln84_1_reg_346 <= icmp_ln84_1_fu_235_p2;
        icmp_ln84_reg_336_pp0_iter2_reg <= icmp_ln84_reg_336_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OutConv2_ce0 = 1'b1;
    end else begin
        OutConv2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OutPadConv3_ce0 = 1'b1;
    end else begin
        OutPadConv3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OutPadConv3_we0 = 1'b1;
    end else begin
        OutPadConv3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln81_fu_116_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_c_load = 4'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten41_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten41_load = indvar_flatten41_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_n_load = 8'd0;
    end else begin
        ap_sig_allocacmp_n_load = n_fu_60;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv2_address0 = zext_ln84_1_fu_262_p1;

assign OutPadConv3_address0 = zext_ln84_fu_271_p1;

assign OutPadConv3_d0 = ((or_ln84_fu_267_p2[0:0] == 1'b1) ? 32'd0 : OutConv2_q0);

assign add_ln81_1_fu_148_p2 = (ap_sig_allocacmp_c_load + 4'd1);

assign add_ln81_fu_122_p2 = (ap_sig_allocacmp_indvar_flatten41_load + 11'd1);

assign add_ln83_fu_186_p2 = (select_ln81_fu_140_p3 + 8'd1);

assign add_ln84_1_fu_240_p2 = (p_shl19_cast_fu_214_p1 + zext_ln83_fu_225_p1);

assign add_ln84_2_fu_256_p2 = ($signed(sext_ln84_fu_252_p1) + $signed(add_ln84_1_fu_240_p2));

assign add_ln84_3_fu_246_p2 = ($signed(zext_ln83_2_fu_232_p1) + $signed(9'd510));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_139_fu_166_p1 = select_ln81_1_fu_154_p3[2:0];

assign grp_fu_284_p0 = grp_fu_284_p00;

assign grp_fu_284_p00 = select_ln81_1_fu_154_p3;

assign grp_fu_284_p1 = 11'd164;

assign grp_fu_284_p2 = grp_fu_284_p20;

assign grp_fu_284_p20 = select_ln81_reg_318_pp0_iter1_reg;

assign icmp_ln81_fu_116_p2 = ((ap_sig_allocacmp_indvar_flatten41_load == 11'd1312) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_134_p2 = ((ap_sig_allocacmp_n_load == 8'd164) ? 1'b1 : 1'b0);

assign icmp_ln84_1_fu_235_p2 = ((select_ln81_reg_318_pp0_iter1_reg > 8'd161) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_180_p2 = ((tmp_fu_170_p4 == 7'd0) ? 1'b1 : 1'b0);

assign or_ln84_fu_267_p2 = (icmp_ln84_reg_336_pp0_iter2_reg | icmp_ln84_1_reg_346);

assign p_shl11_fu_207_p3 = {{empty_139_reg_330_pp0_iter1_reg}, {7'd0}};

assign p_shl12_fu_218_p3 = {{empty_139_reg_330_pp0_iter1_reg}, {5'd0}};

assign p_shl19_cast_fu_214_p1 = p_shl11_fu_207_p3;

assign select_ln81_1_fu_154_p3 = ((icmp_ln83_fu_134_p2[0:0] == 1'b1) ? add_ln81_1_fu_148_p2 : ap_sig_allocacmp_c_load);

assign select_ln81_fu_140_p3 = ((icmp_ln83_fu_134_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_n_load);

assign sext_ln84_fu_252_p1 = $signed(add_ln84_3_fu_246_p2);

assign tmp_fu_170_p4 = {{select_ln81_fu_140_p3[7:1]}};

assign zext_ln83_2_fu_232_p1 = select_ln81_reg_318_pp0_iter1_reg;

assign zext_ln83_fu_225_p1 = p_shl12_fu_218_p3;

assign zext_ln84_1_fu_262_p1 = add_ln84_2_fu_256_p2;

assign zext_ln84_fu_271_p1 = grp_fu_284_p3;

endmodule //CNN_CNN_Pipeline_loop_for_3_channel_pad_3_loop_for_channel_pad_3
