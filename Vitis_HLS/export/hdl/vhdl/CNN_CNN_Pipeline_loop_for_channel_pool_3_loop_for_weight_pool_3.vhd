-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_channel_pool_3_loop_for_weight_pool_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OutConv7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv7_ce0 : OUT STD_LOGIC;
    OutConv7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutConv7_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv7_ce1 : OUT STD_LOGIC;
    OutConv7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OutPool3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OutPool3_ce0 : OUT STD_LOGIC;
    OutPool3_we0 : OUT STD_LOGIC;
    OutPool3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1469_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1469_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1469_p_ce : OUT STD_LOGIC;
    grp_fu_1473_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1473_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1473_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1473_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1473_p_ce : OUT STD_LOGIC );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_channel_pool_3_loop_for_weight_pool_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_C1200000 : STD_LOGIC_VECTOR (31 downto 0) := "11000001001000000000000000000000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln72_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln72_fu_175_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln72_reg_500 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln72_reg_500_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln72_reg_500_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_fu_197_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_505 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_505_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_505_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln79_1_fu_260_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_1_reg_516 : STD_LOGIC_VECTOR (10 downto 0);
    signal pool_value_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_1_fu_332_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_1_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_value_1_reg_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln80_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln80_1_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_72 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln85_fu_266_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_load : STD_LOGIC_VECTOR (4 downto 0);
    signal z_fu_76 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln72_1_fu_189_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_z_load : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten242_fu_80 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln72_fu_157_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten242_load : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln75_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln72_1_fu_183_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_201_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_213_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl60_cast_fu_209_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl61_cast_fu_221_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_231_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln79_fu_239_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_131_fu_225_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_fu_243_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln79_fu_254_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln81_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_294_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln81_fu_304_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln81_1_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln81_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl2_fu_340_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_fu_351_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal bitcast_ln81_1_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln81_2_fu_382_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_368_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln81_1_fu_378_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln81_3_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_2_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_385_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln81_2_fu_395_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln81_5_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_4_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln81_1_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln81_2_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_1_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_2_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln75_fu_358_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln75_1_fu_362_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln83_fu_454_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln83_fu_460_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl58_cast_fu_347_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln83_1_fu_464_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten242_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln72_fu_151_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten242_fu_80 <= add_ln72_fu_157_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten242_fu_80 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln72_fu_151_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    y_fu_72 <= add_ln85_fu_266_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_72 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    z_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln72_fu_151_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    z_fu_76 <= select_ln72_1_fu_189_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    z_fu_76 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln79_1_reg_516(10 downto 1) <= add_ln79_1_fu_260_p2(10 downto 1);
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_505 <= empty_fu_197_p1;
                empty_reg_505_pp0_iter1_reg <= empty_reg_505;
                select_ln72_reg_500 <= select_ln72_fu_175_p3;
                select_ln72_reg_500_pp0_iter1_reg <= select_ln72_reg_500;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                empty_reg_505_pp0_iter2_reg <= empty_reg_505_pp0_iter1_reg;
                max_1_reg_533 <= max_1_fu_332_p3;
                select_ln72_reg_500_pp0_iter2_reg <= select_ln72_reg_500_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                pool_value_1_reg_540 <= OutConv7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                pool_value_reg_521 <= OutConv7_q1;
            end if;
        end if;
    end process;
    add_ln79_1_reg_516(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutConv7_address0 <= zext_ln80_1_fu_287_p1(11 - 1 downto 0);
    OutConv7_address1 <= zext_ln80_fu_249_p1(11 - 1 downto 0);

    OutConv7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutConv7_ce0 <= ap_const_logic_1;
        else 
            OutConv7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OutConv7_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutConv7_ce1 <= ap_const_logic_1;
        else 
            OutConv7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_address0 <= zext_ln84_fu_470_p1(10 - 1 downto 0);

    OutPool3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            OutPool3_ce0 <= ap_const_logic_1;
        else 
            OutPool3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_d0 <= 
        pool_value_1_reg_540 when (and_ln81_2_fu_441_p2(0) = '1') else 
        max_1_reg_533;

    OutPool3_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            OutPool3_we0 <= ap_const_logic_1;
        else 
            OutPool3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln72_1_fu_183_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_z_load) + unsigned(ap_const_lv6_1));
    add_ln72_fu_157_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten242_load) + unsigned(ap_const_lv10_1));
    add_ln79_1_fu_260_p2 <= std_logic_vector(unsigned(zext_ln79_fu_239_p1) + unsigned(or_ln79_fu_254_p2));
    add_ln79_fu_243_p2 <= std_logic_vector(unsigned(zext_ln79_fu_239_p1) + unsigned(empty_131_fu_225_p2));
    add_ln83_1_fu_464_p2 <= std_logic_vector(unsigned(zext_ln83_fu_460_p1) + unsigned(p_shl58_cast_fu_347_p1));
    add_ln83_fu_454_p2 <= std_logic_vector(unsigned(zext_ln75_fu_358_p1) + unsigned(zext_ln75_1_fu_362_p1));
    add_ln85_fu_266_p2 <= std_logic_vector(unsigned(select_ln72_fu_175_p3) + unsigned(ap_const_lv5_1));
    and_ln81_1_fu_435_p2 <= (or_ln81_2_fu_429_p2 and or_ln81_1_fu_411_p2);
    and_ln81_2_fu_441_p2 <= (grp_fu_1473_p_dout0 and and_ln81_1_fu_435_p2);
    and_ln81_fu_326_p2 <= (or_ln81_fu_320_p2 and grp_fu_1469_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln72_fu_151_p2)
    begin
        if (((icmp_ln72_fu_151_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten242_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten242_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten242_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten242_load <= indvar_flatten242_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_y_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_72, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_y_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_y_load <= y_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_z_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, z_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_z_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_z_load <= z_fu_76;
        end if; 
    end process;

    bitcast_ln81_1_fu_365_p1 <= pool_value_1_reg_540;
    bitcast_ln81_2_fu_382_p1 <= max_1_reg_533;
    bitcast_ln81_fu_291_p1 <= pool_value_reg_521;
    empty_131_fu_225_p2 <= std_logic_vector(unsigned(p_shl60_cast_fu_209_p1) + unsigned(p_shl61_cast_fu_221_p1));
    empty_fu_197_p1 <= select_ln72_1_fu_189_p3(5 - 1 downto 0);
    grp_fu_1469_p_ce <= ap_const_logic_1;
    grp_fu_1469_p_din0 <= OutConv7_q1;
    grp_fu_1469_p_din1 <= ap_const_lv32_C1200000;
    grp_fu_1469_p_opcode <= ap_const_lv5_2;
    grp_fu_1473_p_ce <= ap_const_logic_1;
    grp_fu_1473_p_din0 <= OutConv7_q0;
    grp_fu_1473_p_din1 <= max_1_fu_332_p3;
    grp_fu_1473_p_opcode <= ap_const_lv5_2;
    icmp_ln72_fu_151_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten242_load = ap_const_lv10_280) else "0";
    icmp_ln75_fu_169_p2 <= "1" when (ap_sig_allocacmp_y_load = ap_const_lv5_14) else "0";
    icmp_ln81_1_fu_314_p2 <= "1" when (trunc_ln81_fu_304_p1 = ap_const_lv23_0) else "0";
    icmp_ln81_2_fu_399_p2 <= "0" when (tmp_3_fu_368_p4 = ap_const_lv8_FF) else "1";
    icmp_ln81_3_fu_405_p2 <= "1" when (trunc_ln81_1_fu_378_p1 = ap_const_lv23_0) else "0";
    icmp_ln81_4_fu_417_p2 <= "0" when (tmp_4_fu_385_p4 = ap_const_lv8_FF) else "1";
    icmp_ln81_5_fu_423_p2 <= "1" when (trunc_ln81_2_fu_395_p1 = ap_const_lv23_0) else "0";
    icmp_ln81_fu_308_p2 <= "0" when (tmp_1_fu_294_p4 = ap_const_lv8_FF) else "1";
    max_1_fu_332_p3 <= 
        pool_value_reg_521 when (and_ln81_fu_326_p2(0) = '1') else 
        ap_const_lv32_C1200000;
    or_ln79_fu_254_p2 <= (empty_131_fu_225_p2 or ap_const_lv11_1);
    or_ln81_1_fu_411_p2 <= (icmp_ln81_3_fu_405_p2 or icmp_ln81_2_fu_399_p2);
    or_ln81_2_fu_429_p2 <= (icmp_ln81_5_fu_423_p2 or icmp_ln81_4_fu_417_p2);
    or_ln81_fu_320_p2 <= (icmp_ln81_fu_308_p2 or icmp_ln81_1_fu_314_p2);
    p_shl1_fu_213_p3 <= (empty_fu_197_p1 & ap_const_lv3_0);
    p_shl2_fu_340_p3 <= (empty_reg_505_pp0_iter2_reg & ap_const_lv4_0);
    p_shl3_fu_351_p3 <= (empty_reg_505_pp0_iter2_reg & ap_const_lv2_0);
    p_shl58_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_340_p3),10));
    p_shl60_cast_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_201_p3),11));
    p_shl61_cast_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_213_p3),11));
    p_shl_fu_201_p3 <= (empty_fu_197_p1 & ap_const_lv5_0);
    select_ln72_1_fu_189_p3 <= 
        add_ln72_1_fu_183_p2 when (icmp_ln75_fu_169_p2(0) = '1') else 
        ap_sig_allocacmp_z_load;
    select_ln72_fu_175_p3 <= 
        ap_const_lv5_0 when (icmp_ln75_fu_169_p2(0) = '1') else 
        ap_sig_allocacmp_y_load;
    tmp_1_fu_294_p4 <= bitcast_ln81_fu_291_p1(30 downto 23);
    tmp_3_fu_368_p4 <= bitcast_ln81_1_fu_365_p1(30 downto 23);
    tmp_4_fu_385_p4 <= bitcast_ln81_2_fu_382_p1(30 downto 23);
    tmp_s_fu_231_p3 <= (select_ln72_fu_175_p3 & ap_const_lv1_0);
    trunc_ln81_1_fu_378_p1 <= bitcast_ln81_1_fu_365_p1(23 - 1 downto 0);
    trunc_ln81_2_fu_395_p1 <= bitcast_ln81_2_fu_382_p1(23 - 1 downto 0);
    trunc_ln81_fu_304_p1 <= bitcast_ln81_fu_291_p1(23 - 1 downto 0);
    zext_ln75_1_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln72_reg_500_pp0_iter2_reg),8));
    zext_ln75_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_351_p3),8));
    zext_ln79_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_231_p3),11));
    zext_ln80_1_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_1_reg_516),64));
    zext_ln80_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_fu_243_p2),64));
    zext_ln83_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_fu_454_p2),10));
    zext_ln84_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_1_fu_464_p2),64));
end behav;
